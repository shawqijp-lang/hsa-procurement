/**
 * ๐ ูุณุงุฑุงุช ุชูุงุฑูุฑ Excel ูุญุฏุซุฉ - ูุธุงู HSA
 * ุชูุงุฑูุฑ ุงูุชููููุงุช ุงูููููุฉ ูุน ุงูุชุนูููุงุช ูุงูููุชุฑุฉ ุงูุดุงููุฉ
 */

import express from 'express';
import ExcelJS from 'exceljs';
import { db } from '../db';
import { dailyChecklists, checklistTemplates, users, locations, companies } from '../../shared/schema';
import { eq, and, gte, lte, inArray, desc } from 'drizzle-orm';
import jwt from 'jsonwebtoken';
import { storage } from '../storage';

const router = express.Router();

// Enhanced security: No fallback for production
const JWT_SECRET = process.env.JWT_SECRET || (() => {
  if (process.env.NODE_ENV === 'production') {
    throw new Error('JWT_SECRET must be set in production environment');
  }
  return "dev-secret-key-2025"; // Only for development
})();

// Authentication middleware
async function authenticateToken(req: any, res: any, next: any) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: 'Access token required' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as any;
    const userId = decoded.id || decoded.userId;
    
    if (!userId) {
      return res.status(403).json({ message: 'Invalid token format' });
    }
    
    const user = await storage.getUser(userId);
    if (!user || !user.isActive) {
      return res.status(401).json({ message: 'User not found or inactive' });
    }
    
    req.user = user;
    req.userCompanyId = user.companyId;
    next();
  } catch (error) {
    return res.status(403).json({ message: 'Invalid token' });
  }
}

/**
 * ๐ ุชูุฑูุฑ Excel ููุชููููุงุช ุงูููููุฉ - ูุญุฏุซ 2025
 */
router.get('/evaluations', authenticateToken, async (req: any, res) => {
  try {
    console.log('๐ ุฅูุดุงุก ุชูุฑูุฑ Excel ููุชููููุงุช ุงูููููุฉ...');
    
    const {
      startDate,
      endDate,
      locationId,
      userId,
      companyId
    } = req.query;
    
    const currentUser = req.user;
    const userCompanyId = currentUser.companyId;
    
    // ุจูุงุก ุดุฑูุท ุงูููุชุฑุฉ ุงูุฃุณุงุณูุฉ
    const conditions = [];
    
    // ููุชุฑุฉ ุญุณุจ ุดุฑูุฉ ุงููุณุชุฎุฏู (ุฃูุงู ุฃุณุงุณู)
    if (currentUser.role !== 'general_manager') {
      conditions.push(eq(dailyChecklists.companyId, userCompanyId));
    } else if (companyId && companyId !== 'all') {
      conditions.push(eq(dailyChecklists.companyId, parseInt(companyId)));
    }
    
    // ููุชุฑุฉ ุงูุชุงุฑูุฎ
    if (startDate) {
      conditions.push(gte(dailyChecklists.checklistDate, startDate));
    }
    if (endDate) {
      conditions.push(lte(dailyChecklists.checklistDate, endDate));
    }
    
    // ููุชุฑุฉ ุงููููุน
    if (locationId && locationId !== 'all') {
      conditions.push(eq(dailyChecklists.locationId, parseInt(locationId)));
    }
    
    // ููุชุฑุฉ ุงููุณุชุฎุฏู
    if (userId && userId !== 'all') {
      conditions.push(eq(dailyChecklists.userId, parseInt(userId)));
    }

    // ุฌูุจ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const evaluationsData = await db
      .select({
        evaluation: dailyChecklists,
        user: users,
        location: locations,
        company: companies
      })
      .from(dailyChecklists)
      .leftJoin(users, eq(dailyChecklists.userId, users.id))
      .leftJoin(locations, eq(dailyChecklists.locationId, locations.id))
      .leftJoin(companies, eq(dailyChecklists.companyId, companies.id))
      .where(conditions.length > 0 ? and(...conditions) : undefined)
      .orderBy(desc(dailyChecklists.checklistDate), desc(dailyChecklists.id));

    // ุฌูุจ ุฌููุน ููุงูุจ ุงูููุงุฆู ููุญุตูู ุนูู ุฃุณูุงุก ุงูููุงู
    const allTemplates = await db
      .select()
      .from(checklistTemplates);

    // ุฅูุดุงุก ุฎุฑูุทุฉ ูููุตูู ุงูุณุฑูุน ููููุงูุจ
    const templatesMap = new Map();
    allTemplates.forEach(template => {
      templatesMap.set(template.id, template);
    });

    // ุฅูุดุงุก ููู Excel ุฌุฏูุฏ
    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'ูุธุงู HSA ูุฅุฏุงุฑุฉ ุจูุฆุฉ ุงูุนูู';
    workbook.lastModifiedBy = currentUser.fullName || currentUser.username;
    workbook.created = new Date();

    // ุฅูุดุงุก ูุฑูุฉ ุงูุนูู ุงูุฃููู: ููุฎุต ุงูุจูุงูุงุช
    const summarySheet = workbook.addWorksheet('ููุฎุต ุงูุชููููุงุช', {
      pageSetup: { orientation: 'landscape', paperSize: 9 }
    });

    // ุชูุณูู ุงูููุฏุฑ ุงูุฑุฆูุณู
    summarySheet.mergeCells('A1:G2');
    const headerCell = summarySheet.getCell('A1');
    headerCell.value = `ุชูุฑูุฑ ุงูุชููููุงุช ุงูููููุฉ - ูุธุงู ูุงุฆู ุณุนูุฏ ุฃูุนู ูุดุฑูุงู`;
    headerCell.font = { name: 'Arial', size: 16, bold: true, color: { argb: 'FFFFFF' } };
    headerCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD700' } };
    headerCell.alignment = { vertical: 'middle', horizontal: 'center' };
    headerCell.border = {
      top: { style: 'thick' },
      left: { style: 'thick' },
      bottom: { style: 'thick' },
      right: { style: 'thick' }
    };

    // ูุนูููุงุช ุงูุชูุฑูุฑ
    summarySheet.getCell('A4').value = 'ุชุงุฑูุฎ ุฅูุดุงุก ุงูุชูุฑูุฑ:';
    summarySheet.getCell('B4').value = new Date().toLocaleDateString('ar-EG', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      calendar: 'gregory' 
    });
    
    summarySheet.getCell('A5').value = 'ุชู ุฅูุดุงุคู ุจูุงุณุทุฉ:';
    summarySheet.getCell('B5').value = currentUser.fullName || currentUser.username;
    
    if (startDate || endDate) {
      summarySheet.getCell('A6').value = 'ูุชุฑุฉ ุงูุชูุฑูุฑ:';
      summarySheet.getCell('B6').value = `ูู ${startDate || 'ุบูุฑ ูุญุฏุฏ'} ุฅูู ${endDate || 'ุบูุฑ ูุญุฏุฏ'}`;
    }

    // ุนุฏุฏ ุงูุณุฌูุงุช
    summarySheet.getCell('A8').value = 'ุฅุฌูุงูู ุนุฏุฏ ุงูุชููููุงุช:';
    summarySheet.getCell('B8').value = evaluationsData.length;
    summarySheet.getCell('B8').font = { bold: true, color: { argb: '0066CC' } };

    // ุฅูุดุงุก ูุฑูุฉ ุงูุนูู ุงูุซุงููุฉ: ุงูุจูุงูุงุช ุงูุชูุตูููุฉ
    const detailSheet = workbook.addWorksheet('ุงูุจูุงูุงุช ุงูุชูุตูููุฉ');

    // ุนูุงููู ุงูุฃุนูุฏุฉ ููุจูุงูุงุช ุงูุชูุตูููุฉ
    const headers = [
      'ุงูุชุงุฑูุฎ',
      'ููุช ุงูุชูููู', 
      'ุงููููุน',
      'ุงููุณุชุฎุฏู',
      'ุงูุดุฑูุฉ',
      'ุงุณู ุงููููุฉ',
      'ููุงุญุธุงุช ุงูุชูููู'
    ];

    // ุฅุถุงูุฉ ุนูุงููู ุงูุฃุนูุฏุฉ
    headers.forEach((header, index) => {
      const cell = detailSheet.getCell(1, index + 1);
      cell.value = header;
      cell.font = { bold: true, color: { argb: 'FFFFFF' } };
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '4472C4' } };
      cell.alignment = { horizontal: 'center', vertical: 'middle' };
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });

    // ุฅุถุงูุฉ ุงูุจูุงูุงุช
    let currentRow = 2; // ุงูุจุฏุก ูู ุงูุตู ุงูุซุงูู ุจุนุฏ ุงูุนูุงููู

    for (const row of evaluationsData) {
      const evaluation = row.evaluation;
      const user = row.user;
      const location = row.location;
      const company = row.company;
      
      // ูุนุงูุฌุฉ ุจูุงูุงุช ุงูููุงู
      let tasks = [];
      try {
        if (evaluation.tasks && typeof evaluation.tasks === 'string') {
          tasks = JSON.parse(evaluation.tasks);
        } else if (Array.isArray(evaluation.tasks)) {
          tasks = evaluation.tasks;
        }
      } catch (error) {
        console.error('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุจูุงูุงุช ุงูููุงู:', error);
        tasks = [];
      }

      // ุชูุณูู ููุช ุงูุชูููู
      const evaluationTime = evaluation.createdAt 
        ? new Date(evaluation.createdAt).toLocaleTimeString('ar-EG', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: false 
          })
        : 'ุบูุฑ ูุญุฏุฏ';

      // ุฅุฐุง ูู ุชูุฌุฏ ููุงูุ ุงุนุฑุถ ุตู ูุงุญุฏ ููุท
      if (tasks.length === 0) {
        const rowData = [
          evaluation.checklistDate,
          evaluationTime,
          location?.nameAr || 'ุบูุฑ ูุญุฏุฏ',
          user?.fullName || user?.username || 'ุบูุฑ ูุญุฏุฏ',
          company?.nameAr || 'ุบูุฑ ูุญุฏุฏ',
          'ูุง ุชูุฌุฏ ููุงู',
          evaluation.evaluationNotes || ''
        ];

        rowData.forEach((data, colIndex) => {
          const cell = detailSheet.getCell(currentRow, colIndex + 1);
          cell.value = data;
          cell.alignment = { horizontal: 'center', vertical: 'middle' };
          cell.border = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
          };
        });
        currentRow++;
      } else {
        // ุนุฑุถ ูู ูููุฉ ูู ุตู ูููุตู
        tasks.forEach((task: any, taskIndex: number) => {
          const isFirstTask = taskIndex === 0;
          
          // ุงูุญุตูู ุนูู ูุนูููุงุช ุงููููุฉ ูู ุงููุงูุจ
          const template = templatesMap.get(task.templateId);
          let taskName = 'ูููุฉ ุบูุฑ ูุญุฏุฏุฉ';
          
          if (template) {
            taskName = template.nameAr || template.name || 'ูููุฉ ุบูุฑ ูุญุฏุฏุฉ';
          }
          
          // ุงูุชุญูู ูู ูุฌูุฏ ุชููููุงุช ูุฑุนูุฉ
          if (task.subTaskRatings && Array.isArray(task.subTaskRatings) && task.subTaskRatings.length > 0) {
            // ุนุฑุถ ูู ูููุฉ ูุฑุนูุฉ ูู ุตู ูููุตู
            task.subTaskRatings.forEach((subTask: any, subTaskIndex: number) => {
              const isFirstSubTask = subTaskIndex === 0;
              const isFirstOverall = isFirstTask && isFirstSubTask;
              
              const rowData = [
                isFirstOverall ? evaluation.checklistDate : '', // ุงูุชุงุฑูุฎ ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? evaluationTime : '', // ุงูููุช ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? (location?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููููุน ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? (user?.fullName || user?.username || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููุณุชุฎุฏู ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? (company?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงูุดุฑูุฉ ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstSubTask ? taskName : '', // ุงุณู ุงููููุฉ ุงูุฑุฆูุณูุฉ ูู ุงููููุฉ ุงููุฑุนูุฉ ุงูุฃููู ููุท
                (taskIndex === 0 && subTaskIndex === 0) ? (evaluation.evaluationNotes || '') : '' // ุงูููุงุญุธุงุช ููุท ูู ุงููููุฉ ุงูุฃููู
              ];

              rowData.forEach((data, colIndex) => {
                const cell = detailSheet.getCell(currentRow, colIndex + 1);
                cell.value = data;
                cell.alignment = { horizontal: 'center', vertical: 'middle' };
                cell.border = {
                  top: { style: 'thin' },
                  left: { style: 'thin' },
                  bottom: { style: 'thin' },
                  right: { style: 'thin' }
                };
              });
              currentRow++;
            });
          } else {
            // ุนุฑุถ ุงููููุฉ ุงูุนุงุฏูุฉ (ุจุฏูู ููุงู ูุฑุนูุฉ)
            let evaluationCriteria = '-';
            
            if (template) {
              if (template.subPoints && Array.isArray(template.subPoints) && template.subPoints.length > 0) {
                evaluationCriteria = template.subPoints.map((point: any) => 
                  point.ar || point.nameAr || point.name || 'ุจูุฏ ุบูุฑ ูุญุฏุฏ'
                ).join(' | ');
              } else if (template.multiTasks && Array.isArray(template.multiTasks) && template.multiTasks.length > 0) {
                evaluationCriteria = template.multiTasks.map((multiTask: any) => 
                  multiTask.ar || multiTask.nameAr || multiTask.name || 'ูููุฉ ูุชุนุฏุฏุฉ ุบูุฑ ูุญุฏุฏุฉ'
                ).join(' | ');
              } else if (template.subTasks && Array.isArray(template.subTasks) && template.subTasks.length > 0) {
                evaluationCriteria = template.subTasks.map((subTask: any) => 
                  subTask.ar || subTask.nameAr || subTask.name || 'ูููุฉ ูุฑุนูุฉ ุบูุฑ ูุญุฏุฏุฉ'
                ).join(' | ');
              } else if (template.category) {
                evaluationCriteria = template.category;
              }
            }
            
            // ุญุณุงุจ ูุชูุณุท ุงูุชูููู ูููููุฉ
            let taskRating = task.rating || '0';
            if (task.subTaskRatings && Array.isArray(task.subTaskRatings) && task.subTaskRatings.length > 0) {
              const totalRating = task.subTaskRatings.reduce((sum: number, subTask: any) => sum + (subTask.rating || 0), 0);
              taskRating = task.subTaskRatings.length > 0 ? (totalRating / task.subTaskRatings.length).toFixed(1) : '0';
            }
            
            const rowData = [
              isFirstTask ? evaluation.checklistDate : '', // ุงูุชุงุฑูุฎ ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? evaluationTime : '', // ุงูููุช ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? (location?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููููุน ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? (user?.fullName || user?.username || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููุณุชุฎุฏู ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? (company?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงูุดุฑูุฉ ููุท ูู ุงููููุฉ ุงูุฃููู
              taskName,
              taskIndex === 0 ? (evaluation.evaluationNotes || '') : '' // ุงูููุงุญุธุงุช ููุท ูู ุงููููุฉ ุงูุฃููู
            ];

            rowData.forEach((data, colIndex) => {
              const cell = detailSheet.getCell(currentRow, colIndex + 1);
              cell.value = data;
              cell.alignment = { horizontal: 'center', vertical: 'middle' };
              cell.border = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
              };

              // ุชูููู ูุดุฑูุท ููุชูุณุท ุงูุชูููู
              if (colIndex === 5) { // ุนููุฏ ุงูุชูููู/ุงููููุฉ
                const rating = parseFloat(taskRating);
                if (rating >= 4) {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'C6EFCE' } };
                } else if (rating >= 3) {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFEB9C' } };
                } else if (rating > 0) {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC7CE' } };
                }
              }
            });
            currentRow++;
          }
        });
      }
    }

    // ุชุนุฏูู ุนุฑุถ ุงูุฃุนูุฏุฉ
    detailSheet.columns = [
      { width: 15 }, // ุงูุชุงุฑูุฎ
      { width: 12 }, // ููุช ุงูุชูููู
      { width: 25 }, // ุงููููุน
      { width: 20 }, // ุงููุณุชุฎุฏู
      { width: 20 }, // ุงูุดุฑูุฉ
      { width: 30 }, // ุงุณู ุงููููุฉ
      { width: 30 }  // ููุงุญุธุงุช
    ];

    // ุฅุนุฏุงุฏ ุงูุงุณุชุฌุงุจุฉ
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="evaluations_report_${new Date().toISOString().split('T')[0]}.xlsx"`);

    // ุฅุฑุณุงู ุงูููู
    await workbook.xlsx.write(res);
    res.end();

    console.log(`โ ุชู ุฅูุดุงุก ุชูุฑูุฑ Excel ุจูุฌุงุญ - ${evaluationsData.length} ุณุฌู`);

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุชูุฑูุฑ Excel:', error);
    res.status(500).json({ 
      message: 'ูุดู ูู ุฅูุดุงุก ุงูุชูุฑูุฑ',
      error: process.env.NODE_ENV === 'development' ? (error as Error).message : 'ุฎุทุฃ ุฏุงุฎูู'
    });
  }
});

/**
 * ๐ ุงูุญุตูู ุนูู ูุงุฆูุฉ ุงูููุงูุน ููููุชุฑุฉ
 */
router.get('/filter-locations/:companyId', authenticateToken, async (req: any, res) => {
  try {
    const { companyId } = req.params;
    const currentUser = req.user;
    
    let conditions = [];
    
    if (currentUser.role !== 'general_manager') {
      conditions.push(eq(locations.companyId, currentUser.companyId));
    } else if (companyId !== 'all') {
      conditions.push(eq(locations.companyId, parseInt(companyId)));
    }
    
    const locationsList = await db
      .select({
        id: locations.id,
        nameAr: locations.nameAr,
        icon: locations.icon
      })
      .from(locations)
      .where(conditions.length > 0 ? and(...conditions) : undefined)
      .orderBy(locations.nameAr);
    
    res.json(locationsList);
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุฌูุจ ูุงุฆูุฉ ุงูููุงูุน:', error);
    res.status(500).json({ message: 'ูุดู ูู ุฌูุจ ูุงุฆูุฉ ุงูููุงูุน' });
  }
});

/**
 * ๐ฅ ุงูุญุตูู ุนูู ูุงุฆูุฉ ุงููุณุชุฎุฏููู ููููุชุฑุฉ
 */
router.get('/filter-users/:companyId', authenticateToken, async (req: any, res) => {
  try {
    const { companyId } = req.params;
    const currentUser = req.user;
    
    let conditions = [];
    
    if (currentUser.role !== 'general_manager') {
      conditions.push(eq(users.companyId, currentUser.companyId));
    } else if (companyId !== 'all') {
      conditions.push(eq(users.companyId, parseInt(companyId)));
    }
    
    const usersList = await db
      .select({
        id: users.id,
        username: users.username,
        fullName: users.fullName
      })
      .from(users)
      .where(conditions.length > 0 ? and(...conditions) : undefined)
      .orderBy(users.fullName);
    
    res.json(usersList);
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุฌูุจ ูุงุฆูุฉ ุงููุณุชุฎุฏููู:', error);
    res.status(500).json({ message: 'ูุดู ูู ุฌูุจ ูุงุฆูุฉ ุงููุณุชุฎุฏููู' });
  }
});

/**
 * ๐ ุชูุฑูุฑ ุชูุงุตูู ุชูููู ุงูููุงูุน ุจุงููุงูู
 */
router.get('/location-details', authenticateToken, async (req: any, res) => {
  try {
    console.log('๐ ุฅูุดุงุก ุชูุฑูุฑ ุชูุงุตูู ุชูููู ุงูููุงูุน...');
    
    const currentUser = req.user;
    const userCompanyId = currentUser.companyId;
    
    // ุฌูุจ ุฌููุน ููุงูุจ ุงูููุงุฆู ุฃููุงู ูููุญุต
    const allTemplates = await db.select().from(checklistTemplates);
    console.log('๐ Total templates in DB:', allTemplates.length);
    console.log('๐ Sample template IDs and names:', 
      allTemplates.slice(0, 10).map(t => `ID:${t.id} Name:${t.nameAr || t.name || 'NO_NAME'}`));
    
    // ุฅูุดุงุก ุฎุฑูุทุฉ ูููุตูู ุงูุณุฑูุน ููููุงูุจ  
    const templatesMap = new Map();
    allTemplates.forEach(template => {
      templatesMap.set(template.id, template);
    });
    console.log('๐ TemplatesMap created with size:', templatesMap.size);
    
    const { startDate, endDate, locationId, userId, companyId } = req.query;

    // ุจูุงุก ุดุฑูุท ุงูุงุณุชุนูุงู
    let conditions = [];
    
    // ููุชุฑุฉ ุญุณุจ ุดุฑูุฉ ุงููุณุชุฎุฏู (ุฃูุงู ุฃุณุงุณู)
    if (currentUser.role !== 'general_manager') {
      conditions.push(eq(dailyChecklists.companyId, userCompanyId));
    } else if (companyId && companyId !== 'all') {
      conditions.push(eq(dailyChecklists.companyId, parseInt(companyId)));
    }
    
    // ููุชุฑุฉ ุงูุชุงุฑูุฎ
    if (startDate) {
      conditions.push(gte(dailyChecklists.checklistDate, startDate));
    }
    if (endDate) {
      conditions.push(lte(dailyChecklists.checklistDate, endDate));
    }
    
    // ููุชุฑุฉ ุงููููุน
    if (locationId && locationId !== 'all') {
      conditions.push(eq(dailyChecklists.locationId, parseInt(locationId)));
    }
    
    // ููุชุฑุฉ ุงููุณุชุฎุฏู
    if (userId && userId !== 'all') {
      conditions.push(eq(dailyChecklists.userId, parseInt(userId)));
    }

    // ุฌูุจ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const evaluationsData = await db
      .select({
        evaluation: dailyChecklists,
        user: users,
        location: locations,
        company: companies
      })
      .from(dailyChecklists)
      .leftJoin(users, eq(dailyChecklists.userId, users.id))
      .leftJoin(locations, eq(dailyChecklists.locationId, locations.id))
      .leftJoin(companies, eq(dailyChecklists.companyId, companies.id))
      .where(conditions.length > 0 ? and(...conditions) : undefined)
      .orderBy(desc(dailyChecklists.checklistDate), desc(dailyChecklists.id));

    // ุฌูุจ ุฌููุน ููุงูุจ ุงูููุงุฆู ููุญุตูู ุนูู ุฃุณูุงุก ุงูููุงู
    const allTemplates = await db
      .select()
      .from(checklistTemplates);

    // ุฅูุดุงุก ุฎุฑูุทุฉ ูููุตูู ุงูุณุฑูุน ููููุงูุจ
    const templatesMap = new Map();
    allTemplates.forEach(template => {
      templatesMap.set(template.id, template);
    });

    // ุฅูุดุงุก ููู Excel ุฌุฏูุฏ
    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'ูุธุงู HSA ูุฅุฏุงุฑุฉ ุจูุฆุฉ ุงูุนูู';
    workbook.lastModifiedBy = currentUser.fullName || currentUser.username;
    workbook.created = new Date();

    // ุฅูุดุงุก ูุฑูุฉ ุงูุนูู: ุชูุงุตูู ุชูููู ุงูููุงูุน
    const detailSheet = workbook.addWorksheet('ุชูุงุตูู ุชูููู ุงูููุงูุน');

    // ุชูุณูู ุงูููุฏุฑ ุงูุฑุฆูุณู
    detailSheet.mergeCells('A1:J2');
    const headerCell = detailSheet.getCell('A1');
    headerCell.value = `ุชูุฑูุฑ ุชูุงุตูู ุชูููู ุงูููุงูุน - ูุธุงู ูุงุฆู ุณุนูุฏ ุฃูุนู ูุดุฑูุงู`;
    headerCell.font = { name: 'Arial', size: 16, bold: true, color: { argb: 'FFFFFF' } };
    headerCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD700' } };
    headerCell.alignment = { vertical: 'middle', horizontal: 'center' };
    headerCell.border = {
      top: { style: 'thick' },
      left: { style: 'thick' },
      bottom: { style: 'thick' },
      right: { style: 'thick' }
    };

    // ูุนูููุงุช ุงูุชูุฑูุฑ
    detailSheet.getCell('A4').value = 'ุชุงุฑูุฎ ุฅูุดุงุก ุงูุชูุฑูุฑ:';
    detailSheet.getCell('B4').value = new Date().toLocaleDateString('ar-EG', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      calendar: 'gregory' 
    });
    
    detailSheet.getCell('A5').value = 'ุชู ุฅูุดุงุคู ุจูุงุณุทุฉ:';
    detailSheet.getCell('B5').value = currentUser.fullName || currentUser.username;
    
    if (startDate || endDate) {
      detailSheet.getCell('A6').value = 'ูุชุฑุฉ ุงูุชูุฑูุฑ:';
      detailSheet.getCell('B6').value = `ูู ${startDate || 'ุบูุฑ ูุญุฏุฏ'} ุฅูู ${endDate || 'ุบูุฑ ูุญุฏุฏ'}`;
    }

    // ุนูุงููู ุงูุฃุนูุฏุฉ ููุจูุงูุงุช ุงูุชูุตูููุฉ
    const headers = [
      'ุงูุชุงุฑูุฎ',
      'ููุช ุงูุชูููู',
      'ุงููููุน', 
      'ุงููุณุชุฎุฏู',
      'ุงูุดุฑูุฉ',
      'ุงุณู ุงููููุฉ ุงูุฑุฆูุณูุฉ',
      'ุงุณู ุงููููุฉ ุงููุฑุนูุฉ',
      'ุงูุชูููู',
      'ููุชููุฉ',
      'ููุงุญุธุงุช'
    ];

    // ุฅุถุงูุฉ ุนูุงููู ุงูุฃุนูุฏุฉ ูู ุงูุตู 8
    headers.forEach((header, index) => {
      const cell = detailSheet.getCell(8, index + 1);
      cell.value = header;
      cell.font = { bold: true, color: { argb: 'FFFFFF' } };
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '4472C4' } };
      cell.alignment = { horizontal: 'center', vertical: 'middle' };
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });

    let currentRow = 9;

    // ุฅุถุงูุฉ ุงูุจูุงูุงุช
    for (const row of evaluationsData) {
      const evaluation = row.evaluation;
      const user = row.user;
      const location = row.location;
      const company = row.company;
      
      // ูุนุงูุฌุฉ ุจูุงูุงุช ุงูููุงู
      let tasks = [];
      try {
        if (evaluation.tasks && typeof evaluation.tasks === 'string') {
          tasks = JSON.parse(evaluation.tasks);
        } else if (Array.isArray(evaluation.tasks)) {
          tasks = evaluation.tasks;
        }
      } catch (error) {
        console.error('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุจูุงูุงุช ุงูููุงู:', error);
        tasks = [];
      }

      // ุชูุณูู ููุช ุงูุชูููู
      const evaluationTime = evaluation.createdAt 
        ? new Date(evaluation.createdAt).toLocaleTimeString('ar-EG', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: false 
          })
        : 'ุบูุฑ ูุญุฏุฏ';

      // ุฅุฐุง ูู ุชูุฌุฏ ููุงูุ ุงุนุฑุถ ุตู ูุงุญุฏ ููุท
      if (tasks.length === 0) {
        const rowData = [
          evaluation.checklistDate,
          evaluationTime,
          location?.nameAr || 'ุบูุฑ ูุญุฏุฏ',
          user?.fullName || user?.username || 'ุบูุฑ ูุญุฏุฏ',
          company?.nameAr || 'ุบูุฑ ูุญุฏุฏ',
          'ูุง ุชูุฌุฏ ููุงู',
          '-',
          '-',
          '-',
          evaluation.evaluationNotes || ''
        ];

        rowData.forEach((data, colIndex) => {
          const cell = detailSheet.getCell(currentRow, colIndex + 1);
          cell.value = data;
          cell.alignment = { horizontal: 'center', vertical: 'middle' };
          cell.border = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
          };
        });
        currentRow++;
      } else {
        // ุนุฑุถ ูู ูููุฉ ูู ุตู ูููุตู
        tasks.forEach((task: any, taskIndex: number) => {
          const isFirstTask = taskIndex === 0;
          
          // ุงูุญุตูู ุนูู ูุนูููุงุช ุงููููุฉ ูู ุงูุจูุงูุงุช ุงููุญููุธุฉ ุฃู ุงููุงูุจ
          let taskName = 'ูููุฉ ุบูุฑ ูุญุฏุฏุฉ';
          
          // ุงูุจุญุซ ุนู ุงููุงูุจ ุงููุทุงุจู ูู templateId
          const template = templatesMap.get(task.templateId);
          console.log('๐ Looking for template ID:', task.templateId);
          console.log('๐ Template found:', template ? `${template.nameAr || template.name}` : 'NOT FOUND');
          
          if (template) {
            taskName = template.nameAr || template.name || 'ูุงูุจ ุจุฏูู ุงุณู';
          } else {
            taskName = `ูููุฉ ุบูุฑ ููุฌูุฏุฉ (ID: ${task.templateId})`;
          }
          
          // ุงูุชุญูู ูู ูุฌูุฏ ุชููููุงุช ูุฑุนูุฉ ุฃู ุฅูุดุงุคูุง ูู ุงููุงูุจ
          let subTasksToDisplay = [];
          const template = templatesMap.get(task.templateId);
          
          if (task.subTaskRatings && Array.isArray(task.subTaskRatings) && task.subTaskRatings.length > 0) {
            // ุฅุฐุง ูุงูุช ููุงู ุชููููุงุช ูุฑุนูุฉ ูุญููุธุฉุ ุงุณุชุฎุฏููุง
            subTasksToDisplay = task.subTaskRatings;
          } else if (template) {
            // ุฅูุดุงุก ุงูููุงู ุงููุฑุนูุฉ ูู ุงููุงูุจ
            if (template.multiTasks && Array.isArray(template.multiTasks) && template.multiTasks.length > 0) {
              subTasksToDisplay = template.multiTasks.map((multiTask: any, index: number) => ({
                taskName: multiTask.ar || multiTask.nameAr || multiTask.name || `ูููุฉ ูุชุนุฏุฏุฉ ${index + 1}`,
                rating: task.rating || 0,
                notes: task.notes || ''
              }));
            } else if (template.subTasks && Array.isArray(template.subTasks) && template.subTasks.length > 0) {
              subTasksToDisplay = template.subTasks.map((subTask: any, index: number) => ({
                taskName: subTask.ar || subTask.nameAr || subTask.name || `ูููุฉ ูุฑุนูุฉ ${index + 1}`,
                rating: task.rating || 0,
                notes: task.notes || ''
              }));
            } else if (template.subPoints && Array.isArray(template.subPoints) && template.subPoints.length > 0) {
              subTasksToDisplay = template.subPoints.map((subPoint: any, index: number) => ({
                taskName: subPoint.ar || subPoint.nameAr || subPoint.name || `ููุทุฉ ูุฑุนูุฉ ${index + 1}`,
                rating: task.rating || 0,
                notes: task.notes || ''
              }));
            }
          }
          
          if (subTasksToDisplay.length > 0) {
            // ุนุฑุถ ูู ูููุฉ ูุฑุนูุฉ ูู ุตู ูููุตู
            subTasksToDisplay.forEach((subTask: any, subTaskIndex: number) => {
              const isFirstSubTask = subTaskIndex === 0;
              const isFirstOverall = isFirstTask && isFirstSubTask;
              
              const rowData = [
                isFirstOverall ? evaluation.checklistDate : '', // ุงูุชุงุฑูุฎ ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? evaluationTime : '', // ุงูููุช ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? (location?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููููุน ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? (user?.fullName || user?.username || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููุณุชุฎุฏู ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstOverall ? (company?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงูุดุฑูุฉ ููุท ูู ุงููููุฉ ุงูุฃููู
                isFirstSubTask ? taskName : '', // ุงุณู ุงููููุฉ ุงูุฑุฆูุณูุฉ
                subTask.taskName || 'ูููุฉ ูุฑุนูุฉ ุบูุฑ ูุญุฏุฏุฉ', // ุงุณู ุงููููุฉ ุงููุฑุนูุฉ
                subTask.rating || task.rating || '0', // ุชูููู ุงููููุฉ ุงููุฑุนูุฉ
                (subTask.rating > 0 || task.rating > 0) ? 'ูุนู' : 'ูุง', // ุญุงูุฉ ุงูุฅููุงู ุจูุงุก ุนูู ุงูุชูููู
                (taskIndex === 0 && subTaskIndex === 0) ? (evaluation.evaluationNotes || '') : '' // ุงูููุงุญุธุงุช ููุท ูู ุงููููุฉ ุงูุฃููู
              ];

              rowData.forEach((data, colIndex) => {
                const cell = detailSheet.getCell(currentRow, colIndex + 1);
                cell.value = data;
                cell.alignment = { horizontal: 'center', vertical: 'middle' };
                cell.border = {
                  top: { style: 'thin' },
                  left: { style: 'thin' },
                  bottom: { style: 'thin' },
                  right: { style: 'thin' }
                };

                // ุชูููู ูุดุฑูุท ููุชูููู
                if (colIndex === 7) { // ุนููุฏ ุงูุชูููู
                  const rating = parseFloat(subTask.rating || task.rating || '0');
                  if (rating >= 4) {
                    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'C6EFCE' } };
                  } else if (rating >= 3) {
                    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFEB9C' } };
                  } else if (rating > 0) {
                    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC7CE' } };
                  }
                }

                // ุชูููู ูุดุฑูุท ูุญุงูุฉ ุงูุฅููุงู
                if (colIndex === 8) { // ุนููุฏ ุงูุฅููุงู
                  const rating = parseFloat(subTask.rating || task.rating || '0');
                  if (rating > 0) {
                    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'C6EFCE' } };
                  } else {
                    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC7CE' } };
                  }
                }
              });
              currentRow++;
            });
          } else {
            // ุนุฑุถ ุงููููุฉ ุงูุนุงุฏูุฉ (ุจุฏูู ููุงู ูุฑุนูุฉ)
            let evaluationCriteria = '-';
            
            if (template) {
              if (template.subPoints && Array.isArray(template.subPoints) && template.subPoints.length > 0) {
                evaluationCriteria = template.subPoints.map((point: any) => 
                  point.ar || point.nameAr || point.name || 'ุจูุฏ ุบูุฑ ูุญุฏุฏ'
                ).join(' | ');
              } else if (template.multiTasks && Array.isArray(template.multiTasks) && template.multiTasks.length > 0) {
                evaluationCriteria = template.multiTasks.map((multiTask: any) => 
                  multiTask.ar || multiTask.nameAr || multiTask.name || 'ูููุฉ ูุชุนุฏุฏุฉ ุบูุฑ ูุญุฏุฏุฉ'
                ).join(' | ');
              } else if (template.subTasks && Array.isArray(template.subTasks) && template.subTasks.length > 0) {
                evaluationCriteria = template.subTasks.map((subTask: any) => 
                  subTask.ar || subTask.nameAr || subTask.name || 'ูููุฉ ูุฑุนูุฉ ุบูุฑ ูุญุฏุฏุฉ'
                ).join(' | ');
              } else if (template.category) {
                evaluationCriteria = template.category;
              }
            }
            
            const rowData = [
              isFirstTask ? evaluation.checklistDate : '', // ุงูุชุงุฑูุฎ ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? evaluationTime : '', // ุงูููุช ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? (location?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููููุน ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? (user?.fullName || user?.username || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงููุณุชุฎุฏู ููุท ูู ุงููููุฉ ุงูุฃููู
              isFirstTask ? (company?.nameAr || 'ุบูุฑ ูุญุฏุฏ') : '', // ุงูุดุฑูุฉ ููุท ูู ุงููููุฉ ุงูุฃููู
              taskName, // ุงุณู ุงููููุฉ ุงูุฑุฆูุณูุฉ
              evaluationCriteria, // ุงุณู ุงููููุฉ ุงููุฑุนูุฉ (ุชูุงุตูู ุงููููุฉ)
              task.rating || '0',
              task.completed ? 'ูุนู' : 'ูุง',
              taskIndex === 0 ? (evaluation.evaluationNotes || '') : '' // ุงูููุงุญุธุงุช ููุท ูู ุงููููุฉ ุงูุฃููู
            ];

            rowData.forEach((data, colIndex) => {
              const cell = detailSheet.getCell(currentRow, colIndex + 1);
              cell.value = data;
              cell.alignment = { horizontal: 'center', vertical: 'middle' };
              cell.border = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
              };

              // ุชูููู ูุดุฑูุท ููุชูููู
              if (colIndex === 7 && task.rating) { // ุนููุฏ ุงูุชูููู
                const rating = parseFloat(task.rating);
                if (rating >= 4) {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'C6EFCE' } };
                } else if (rating >= 3) {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFEB9C' } };
                } else if (rating > 0) {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC7CE' } };
                }
              }

              // ุชูููู ูุดุฑูุท ูุญุงูุฉ ุงูุฅููุงู
              if (colIndex === 8) { // ุนููุฏ ุงูุฅููุงู
                if (task.completed) {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'C6EFCE' } };
                } else {
                  cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC7CE' } };
                }
              }
            });
            currentRow++;
          }
        });
      }
    }

    // ุชุนุฏูู ุนุฑุถ ุงูุฃุนูุฏุฉ
    detailSheet.columns = [
      { width: 15 }, // ุงูุชุงุฑูุฎ
      { width: 12 }, // ููุช ุงูุชูููู
      { width: 25 }, // ุงููููุน
      { width: 20 }, // ุงููุณุชุฎุฏู
      { width: 20 }, // ุงูุดุฑูุฉ
      { width: 30 }, // ุงุณู ุงููููุฉ ุงูุฑุฆูุณูุฉ
      { width: 35 }, // ุงุณู ุงููููุฉ ุงููุฑุนูุฉ
      { width: 10 }, // ุงูุชูููู
      { width: 10 }, // ููุชููุฉ
      { width: 30 }  // ููุงุญุธุงุช
    ];

    // ุฅุนุฏุงุฏ ุงูุงุณุชุฌุงุจุฉ
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="location_details_report_${new Date().toISOString().split('T')[0]}.xlsx"`);

    // ุฅุฑุณุงู ุงูููู
    await workbook.xlsx.write(res);
    res.end();

    console.log(`โ ุชู ุฅูุดุงุก ุชูุฑูุฑ ุชูุงุตูู ุงูููุงูุน ุจูุฌุงุญ - ${evaluationsData.length} ุชูููู`);

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุชูุฑูุฑ ุชูุงุตูู ุงูููุงูุน:', error);
    res.status(500).json({ 
      message: 'ูุดู ูู ุฅูุดุงุก ุงูุชูุฑูุฑ',
      error: process.env.NODE_ENV === 'development' ? (error as Error).message : 'ุฎุทุฃ ุฏุงุฎูู'
    });
  }
});

export default router;