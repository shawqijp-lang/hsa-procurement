/**
 * ๐ ูุณุงุฑุงุช API ูููุธุงู ุงูููุญุฏ ูุชุฎุฒูู ุงูุจูุงูุงุช
 */

import { Router, type Request, type Response, type NextFunction } from 'express';
import { unifiedStorage } from '../unified-storage-system';
import jwt from 'jsonwebtoken';
import { storage } from '../storage';

const router = Router();

// JWT Secret
const JWT_SECRET = process.env.JWT_SECRET || "dev-secret-key-2025";

// Middleware ููุชุญูู ูู ุงูุชููู
async function authenticateToken(req: any, res: Response, next: NextFunction) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: 'Access token required' });
  }

  try {
    const payload = jwt.verify(token, JWT_SECRET) as any;
    const user = await storage.getUser(payload.userId);
    
    if (!user || !user.isActive) {
      return res.status(401).json({ message: 'User not found or inactive' });
    }
    
    req.user = user;
    next();
  } catch (error) {
    return res.status(403).json({ message: 'Invalid token' });
  }
}

/**
 * ๐ ูุญุต ุชูุงูู ุงูุจูุงูุงุช
 */
router.get('/integrity-check', authenticateToken, async (req: any, res) => {
  try {
    const currentUser = req.user;
    const companyId = currentUser.role === 'general_manager' ? undefined : currentUser.companyId;
    
    console.log(`๐ ูุญุต ุงูุชูุงูู ููุดุฑูุฉ: ${companyId || 'ุฌููุน ุงูุดุฑูุงุช'}`);
    
    const report = await unifiedStorage.performIntegrityCheck(companyId);
    
    res.json({
      success: true,
      report,
      recommendations: generateRecommendations(report),
      timestamp: new Date().toLocaleString('sv-SE', {
        timeZone: 'Asia/Riyadh'
      })
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ูุญุต ุงูุชูุงูู:', error);
    res.status(500).json({
      success: false,
      message: 'ูุดู ูู ูุญุต ุชูุงูู ุงูุจูุงูุงุช',
      error: (error as Error).message
    });
  }
});

/**
 * ๐ง ุฅุตูุงุญ ูุชูุญูุฏ ุงูุจูุงูุงุช
 */
router.post('/unify-repair', authenticateToken, async (req: any, res) => {
  try {
    const currentUser = req.user;
    const companyId = currentUser.role === 'general_manager' ? undefined : currentUser.companyId;
    
    console.log(`๐ง ุจุฏุก ุงูุชูุญูุฏ ูุงูุฅุตูุงุญ ููุดุฑูุฉ: ${companyId || 'ุฌููุน ุงูุดุฑูุงุช'}`);
    
    const report = await unifiedStorage.unifyAndRepairAllData(companyId);
    
    res.json({
      success: true,
      message: `ุชู ุฅุตูุงุญ ${report.fixedIssues} ูุดููุฉ ุจูุฌุงุญ`,
      beforeReport: {
        totalIssues: report.totalIssues,
        locationMismatches: report.locationMismatches,
        templateMismatches: report.templateMismatches,
        evaluationMismatches: report.evaluationMismatches,
        missingRelations: report.missingRelations,
        duplicateData: report.duplicateData
      },
      afterReport: report,
      fixedIssues: report.fixedIssues,
      timestamp: new Date().toLocaleString('sv-SE', {
        timeZone: 'Asia/Riyadh'
      })
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุชูุญูุฏ ูุงูุฅุตูุงุญ:', error);
    res.status(500).json({
      success: false,
      message: 'ูุดู ูู ุชูุญูุฏ ูุฅุตูุงุญ ุงูุจูุงูุงุช',
      error: (error as Error).message
    });
  }
});

/**
 * ๐ ุฅุญุตุงุฆูุงุช ุงููุธุงู ุงูููุญุฏ
 */
router.get('/stats', authenticateToken, async (req: any, res) => {
  try {
    const currentUser = req.user;
    const companyId = currentUser.role === 'general_manager' ? undefined : currentUser.companyId;
    
    const stats = await unifiedStorage.getUnifiedSystemStats(companyId);
    
    res.json({
      success: true,
      stats,
      recommendations: generateHealthRecommendations(stats.summary.healthScore),
      timestamp: new Date().toLocaleString('sv-SE', {
        timeZone: 'Asia/Riyadh'
      })
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช:', error);
    res.status(500).json({
      success: false,
      message: 'ูุดู ูู ุฌูุจ ุฅุญุตุงุฆูุงุช ุงููุธุงู',
      error: (error as Error).message
    });
  }
});

/**
 * ๐ ุฅุนุงุฏุฉ ุจูุงุก ุงูุชูุงุฑูุฑ ุจุงูุจูุงูุงุช ุงููุตุญุญุฉ
 */
router.post('/rebuild-reports', authenticateToken, async (req: any, res) => {
  try {
    const currentUser = req.user;
    const { reportType = 'all', startDate, endDate, locationId, userId } = req.body;
    
    // ุฃููุงู ูุชุฃูุฏ ูู ุชูุงูู ุงูุจูุงูุงุช
    const companyId = currentUser.role === 'general_manager' ? undefined : currentUser.companyId;
    const integrityReport = await unifiedStorage.performIntegrityCheck(companyId);
    
    if (integrityReport.totalIssues > 0) {
      return res.json({
        success: false,
        message: `ุชู ุงูุนุซูุฑ ุนูู ${integrityReport.totalIssues} ูุดููุฉ ูู ุงูุจูุงูุงุช. ูุฑุฌู ุฅุตูุงุญูุง ุฃููุงู`,
        integrityIssues: integrityReport,
        suggestFix: true
      });
    }

    // ุฅุฐุง ูุงูุช ุงูุจูุงูุงุช ุณูููุฉุ ูุจูู ุงูุชูุงุฑูุฑ
    res.json({
      success: true,
      message: 'ุงูุจูุงูุงุช ุณูููุฉ ููุชุทุงุจูุฉ - ุงูุชูุงุฑูุฑ ุฌุงูุฒุฉ',
      integrityReport,
      reportsReady: true,
      availableReports: [
        { type: 'brief', name: 'ุงูุชูุฑูุฑ ุงููุฎุชุตุฑ', endpoint: '/api/excel-reports/evaluations' },
        { type: 'detailed', name: 'ุงูุชูุฑูุฑ ุงูุชูุตููู', endpoint: '/api/excel-reports/location-details' }
      ],
      timestamp: new Date().toLocaleString('sv-SE', {
        timeZone: 'Asia/Riyadh'
      })
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุนุงุฏุฉ ุจูุงุก ุงูุชูุงุฑูุฑ:', error);
    res.status(500).json({
      success: false,
      message: 'ูุดู ูู ุฅุนุงุฏุฉ ุจูุงุก ุงูุชูุงุฑูุฑ',
      error: (error as Error).message
    });
  }
});

/**
 * ๐ ุชุญุฏูุซ ุงูุชูุฑูุฑ ุงูุชูุตููู ุจุงูุจูุงูุงุช ุงููุทุงุจูุฉ
 */
router.post('/fix-report-data', authenticateToken, async (req: any, res) => {
  try {
    const currentUser = req.user;
    const companyId = currentUser.role === 'general_manager' ? undefined : currentUser.companyId;
    
    console.log('๐ง ุจุฏุก ุฅุตูุงุญ ุจูุงูุงุช ุงูุชูุงุฑูุฑ...');
    
    // ุชูููุฐ ุงูุฅุตูุงุญ ุงูุดุงูู
    const repairReport = await unifiedStorage.unifyAndRepairAllData(companyId);
    
    res.json({
      success: true,
      message: 'ุชู ุฅุตูุงุญ ูุชูุญูุฏ ุจูุงูุงุช ุงูุชูุงุฑูุฑ ุจูุฌุงุญ',
      fixedIssues: repairReport.fixedIssues,
      summary: {
        beforeFix: repairReport.totalIssues,
        afterFix: repairReport.totalIssues - repairReport.fixedIssues,
        improvementPercentage: repairReport.totalIssues > 0 
          ? Math.round((repairReport.fixedIssues / repairReport.totalIssues) * 100) 
          : 100
      },
      nextSteps: [
        'ุชุญููู ุงูุชูุฑูุฑ ุงูุชูุตููู ูู ุตูุญุฉ ุงูุชูุงุฑูุฑ',
        'ุงูุชุญูู ูู ุชุทุงุจู ุฃุณูุงุก ุงูููุงูุน ูุงูููุงู',
        'ูุฑุงุฌุนุฉ ุงูุชููููุงุช ูุงูุชุนูููุงุช'
      ],
      timestamp: new Date().toLocaleString('sv-SE', {
        timeZone: 'Asia/Riyadh'
      })
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุตูุงุญ ุจูุงูุงุช ุงูุชูุงุฑูุฑ:', error);
    res.status(500).json({
      success: false,
      message: 'ูุดู ูู ุฅุตูุงุญ ุจูุงูุงุช ุงูุชูุงุฑูุฑ',
      error: (error as Error).message
    });
  }
});

/**
 * ๐ฏ ุชูููุฏ ุชูุตูุงุช ุจูุงุกู ุนูู ุชูุฑูุฑ ุงูุชูุงูู
 */
function generateRecommendations(report: any): string[] {
  const recommendations: string[] = [];
  
  if (report.locationMismatches > 0) {
    recommendations.push(`ุฅุตูุงุญ ${report.locationMismatches} ูููุน ูุญุชูู ุนูู ุจูุงูุงุช ูุงูุตุฉ`);
  }
  
  if (report.templateMismatches > 0) {
    recommendations.push(`ุชุญุฏูุซ ${report.templateMismatches} ูุงูุจ ููุงู ุบูุฑ ููุชูู`);
  }
  
  if (report.evaluationMismatches > 0) {
    recommendations.push(`ุฅุตูุงุญ ${report.evaluationMismatches} ุชูููู ูุญุชูู ุนูู ุจูุงูุงุช ุบูุฑ ุตุญูุญุฉ`);
  }
  
  if (report.missingRelations > 0) {
    recommendations.push(`ุญู ${report.missingRelations} ุนูุงูุฉ ููููุฏุฉ ุจูู ุงูุฌุฏุงูู`);
  }
  
  if (report.duplicateData > 0) {
    recommendations.push(`ุฅุฒุงูุฉ ${report.duplicateData} ุณุฌู ููุฑุฑ`);
  }
  
  if (recommendations.length === 0) {
    recommendations.push('ุงูุจูุงูุงุช ูุชุณูุฉ ูุฌุงูุฒุฉ ููุงุณุชุฎุฏุงู ูู ุงูุชูุงุฑูุฑ');
  } else {
    recommendations.push('ุงุณุชุฎุฏู ุฅุตูุงุญ ุงูุจูุงูุงุช ุงูุชููุงุฆู ูุญู ุฌููุน ุงููุดุงูู');
  }
  
  return recommendations;
}

/**
 * ๐ก ุชูุตูุงุช ุงูุตุญุฉ ุงูุนุงูุฉ ูููุธุงู
 */
function generateHealthRecommendations(healthScore: number): string[] {
  if (healthScore >= 90) {
    return ['ุงููุธุงู ูู ุญุงูุฉ ููุชุงุฒุฉ', 'ุงุฌุฑู ูุญุต ุฏูุฑู ุดูุฑู ููุญูุงุธ ุนูู ุงูุฌูุฏุฉ'];
  } else if (healthScore >= 70) {
    return ['ุงููุธุงู ูู ุญุงูุฉ ุฌูุฏุฉ', 'ุฑุงุฌุน ุงูุจูุงูุงุช ุงูููููุฏุฉ ุฃู ุงูููุฑุฑุฉ', 'ูู ุจุชุดุบูู ุงูุฅุตูุงุญ ุงูุชููุงุฆู'];
  } else if (healthScore >= 50) {
    return ['ุงููุธุงู ูุญุชุงุฌ ููุตูุงูุฉ', 'ุดุบูู ุงูุฅุตูุงุญ ุงูุดุงูู ููุฑุงู', 'ุฑุงุฌุน ุงูุนูุงูุงุช ุงูููููุฏุฉ'];
  } else {
    return ['ุงููุธุงู ูู ุญุงูุฉ ุณูุฆุฉ', 'ุงูุฅุตูุงุญ ุงูููุฑู ูุทููุจ', 'ุชูุงุตู ูุน ุงูุฏุนู ุงูููู ุฅุฐุง ุงุณุชูุฑุช ุงููุดุงูู'];
  }
}

export default router;