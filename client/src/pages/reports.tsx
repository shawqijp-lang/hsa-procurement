import React, { useState, useEffect } from 'react';
import { format, addDays } from 'date-fns';
import { ar } from 'date-fns/locale';
import { useMutation, useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { useUnifiedEvaluation } from '@/hooks/useUnifiedEvaluation';
import { FileText, Calendar, MapPin, Users, BarChart3, FileSpreadsheet, ChevronDown, ChevronUp, RefreshCw, Brain, Sparkles, Search, Loader2, TrendingUp, Activity, Zap, FileDown } from 'lucide-react';

// Smart Reports Components
import FilterBar from '@/components/smart-reports/FilterBar';
import KPICards from '@/components/smart-reports/KPICards';
import TrendsChart from '@/components/smart-reports/TrendsChart';
import ComparisonTable from '@/components/smart-reports/ComparisonTable';
import type { ReportFilters, KPIResponse, TrendSeries, ComparisonResponse, InsightsResponse } from '@shared/schema';

interface Location {
  id: number;
  nameAr: string;
  nameEn: string;
  icon: string;
  description?: string;
  isActive: boolean;
}

interface User {
  id: number;
  username: string;
  fullName: string;
  role: string;
  isActive: boolean;
}

export default function Reports() {
  const { toast } = useToast();
  
  // ÿ≠ÿßŸÑÿßÿ™ ÿßŸÑŸÅŸÑÿßÿ™ÿ±
  const [dateRange, setDateRange] = useState({
    startDate: format(addDays(new Date(), -30), 'yyyy-MM-dd'),
    endDate: format(new Date(), 'yyyy-MM-dd')
  });
  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);
  const [selectedLocationIds, setSelectedLocationIds] = useState<string[]>([]);
  const [isLocationSelectorOpen, setIsLocationSelectorOpen] = useState(false);
  const [isUserSelectorOpen, setIsUserSelectorOpen] = useState(false);

  // ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ÿßŸÑŸÖŸàÿßŸÇÿπ
  const { data: locations = [] } = useQuery<Location[]>({
    queryKey: ['/api/locations'],
  });

  // ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
  const { data: users = [] } = useQuery<User[]>({
    queryKey: ['/api/users'],
  });

  // ŸÅŸÑÿ™ÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑŸÜÿ¥ÿ∑ŸäŸÜ ŸÅŸÇÿ∑ Ÿàÿßÿ≥ÿ™ÿ®ÿπÿßÿØ ÿßÿÆÿµÿßÿ¶Ÿä ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÉÿ© - ŸÖÿØŸäÿ± ÿßŸÑÿ¥ÿ§ŸàŸÜ ÿßŸÑÿ•ÿØÿßÿ±Ÿäÿ© Ÿäÿ∏Ÿáÿ±
  const filteredUsers = users.filter(user => 
    user.isActive && user.role !== 'data_specialist'
  );

  // ÿ≠ÿ≥ÿßÿ® ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÅŸÑÿßÿ™ÿ±
  const selectedLocationsCount = selectedLocationIds.length > 0 ? selectedLocationIds.length : locations.length;
  const selectedUsersCount = selectedUserIds.length > 0 ? selectedUserIds.length : filteredUsers.length;

  // üéØ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿ≠ÿØ ŸÑŸÑŸÖÿ≤ÿßŸÖŸÜÿ© ŸÅŸÇÿ∑
  const unifiedSystem = useUnifiedEvaluation();
  
  // üîÑ ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ© ÿßŸÑŸäÿØŸàŸäÿ©
  const handleManualSync = async () => {
    try {
      console.log('üöÄ [Reports] ÿ®ÿØÿ° ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ© ÿßŸÑŸäÿØŸàŸäÿ©...');
      // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ syncNow ŸÑŸÑŸÖÿ≤ÿßŸÖŸÜÿ©
      await unifiedSystem.syncNow();
      
      toast({
        title: "ÿ™ŸÖÿ™ ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ©",
        description: "ÿ™ŸÖ ŸÜŸÇŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ© ŸÑŸÑÿÆÿßÿØŸÖ ÿ®ŸÜÿ¨ÿßÿ≠",
        variant: "default"
      });
      
      // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿπÿØ ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ©
      refetchData();
    } catch (error) {
      console.error('‚ùå ŸÅÿ¥ŸÑ ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ©:', error);
      toast({
        title: "ŸÅÿ¥ŸÑ ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ©",
        description: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ŸÜŸÇŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑÿÆÿßÿØŸÖ",
        variant: "destructive"
      });
    }
  };
  
  // üéØ Smart Reports API Queries
  const smartReportsFilters: ReportFilters = {
    startDate: dateRange.startDate,
    endDate: dateRange.endDate,
    locationIds: selectedLocationIds.length > 0 ? selectedLocationIds.map(id => Number(id)) : undefined,
    userIds: selectedUserIds.length > 0 ? selectedUserIds.map(id => Number(id)) : undefined
  };

  // KPI Overview Query
  const { data: kpiData, isLoading: isKpiLoading, error: kpiError } = useQuery<KPIResponse>({
    queryKey: ['/api/reports/overview', smartReportsFilters],
    queryFn: async () => {
      const params = new URLSearchParams({
        startDate: smartReportsFilters.startDate,
        endDate: smartReportsFilters.endDate,
        ...(smartReportsFilters.locationIds && { locationIds: smartReportsFilters.locationIds.join(',') }),
        ...(smartReportsFilters.userIds && { userIds: smartReportsFilters.userIds.join(',') })
      });
      return apiRequest(`/api/reports/overview?${params.toString()}`, 'GET');
    }
  });

  // Trends Query
  const { data: trendsData, isLoading: isTrendsLoading, error: trendsError } = useQuery<TrendSeries>({
    queryKey: ['/api/reports/trends', smartReportsFilters],
    queryFn: async () => {
      const params = new URLSearchParams({
        startDate: smartReportsFilters.startDate,
        endDate: smartReportsFilters.endDate,
        ...(smartReportsFilters.locationIds && { locationIds: smartReportsFilters.locationIds.join(',') }),
        ...(smartReportsFilters.userIds && { userIds: smartReportsFilters.userIds.join(',') })
      });
      return apiRequest(`/api/reports/trends?${params.toString()}`, 'GET');
    }
  });

  // Comparison Query
  const { data: comparisonData, isLoading: isComparisonLoading, error: comparisonError } = useQuery<ComparisonResponse>({
    queryKey: ['/api/reports/comparison', smartReportsFilters],
    queryFn: async () => {
      const params = new URLSearchParams({
        startDate: smartReportsFilters.startDate,
        endDate: smartReportsFilters.endDate,
        ...(smartReportsFilters.locationIds && { locationIds: smartReportsFilters.locationIds.join(',') }),
        ...(smartReportsFilters.userIds && { userIds: smartReportsFilters.userIds.join(',') })
      });
      return apiRequest(`/api/reports/comparison?${params.toString()}`, 'GET');
    }
  });

  // Insights Query
  const { data: insightsData, isLoading: isInsightsLoading, error: insightsError } = useQuery<InsightsResponse>({
    queryKey: ['/api/reports/insights', smartReportsFilters],
    queryFn: async () => {
      const params = new URLSearchParams({
        startDate: smartReportsFilters.startDate,
        endDate: smartReportsFilters.endDate,
        ...(smartReportsFilters.locationIds && { locationIds: smartReportsFilters.locationIds.join(',') }),
        ...(smartReportsFilters.userIds && { userIds: smartReportsFilters.userIds.join(',') })
      });
      return apiRequest(`/api/reports/insights?${params.toString()}`, 'GET');
    }
  });

  // üéØ ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ ŸÅŸÇÿ∑ (ÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ™ŸÉÿ±ÿßÿ±)
  const { data: unifiedEvaluations = [], isLoading: isDataLoading, refetch: refetchData } = useQuery({
    queryKey: ['server-evaluations', dateRange, selectedLocationIds, selectedUserIds],
    queryFn: async () => {
      console.log('üéØ [Reports] ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ ŸÅŸÇÿ∑ (ÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ™ŸÉÿ±ÿßÿ±)...');
      console.log('üîç [Reports] ÿßŸÑŸÅŸÑÿßÿ™ÿ± ÿßŸÑŸÖÿ∑ÿ®ŸÇÿ©:', {
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
        selectedLocationIds,
        selectedUserIds
      });
      
      try {
        // ‚úÖ ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿπÿ®ÿ± API
        const params = new URLSearchParams({
          startDate: dateRange.startDate,
          endDate: dateRange.endDate,
          ...(selectedLocationIds.length > 0 && { 
            locationIds: selectedLocationIds.map(id => parseInt(id)).join(',') 
          }),
          ...(selectedUserIds.length > 0 && { 
            userIds: selectedUserIds.map(id => parseInt(id)).join(',') 
          })
        });
        
        console.log('üåê [Reports] ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ ÿπÿ®ÿ± API...');
        const serverEvaluations = await apiRequest(`/api/checklists?${params.toString()}`, 'GET');
        
        console.log(`‚úÖ [Reports] ÿ™ŸÖ ÿ¨ŸÑÿ® ${serverEvaluations.length} ÿ™ŸÇŸäŸäŸÖ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ (ÿ®ÿØŸàŸÜ ÿ™ŸÉÿ±ÿßÿ±)`);
        
        return serverEvaluations || [];
        
      } catch (error) {
        console.error('‚ùå [Reports] ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ:', error);
        toast({
          title: "ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
          description: "ÿ™ÿπÿ∞ÿ± ÿ¨ŸÑÿ® ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ.",
          variant: "destructive"
        });
        return [];
      }
    },
    staleTime: 30000, // 30 ÿ´ÿßŸÜŸäÿ©
    refetchOnWindowFocus: false
  });

  // ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ
  const totalEvaluations = unifiedEvaluations.length;

  // üîç DIAGNOSTIC: ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©
  const diagnosticMutation = useMutation({
    mutationFn: async () => {
      console.log('üîç [Diagnostic] ÿ®ÿØÿ° ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©...');
      
      try {
        const { enhancedIndexedDB } = await import('@/lib/enhancedIndexedDB');
        const allDataItems = await enhancedIndexedDB.getAllByType('data');
        
        console.log(`üìä [Diagnostic] ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿπŸÜÿßÿµÿ± ŸÅŸä IndexedDB: ${allDataItems.length}`);
        
        // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™
        const evaluationItems = allDataItems.filter(item => 
          item.id.includes('checklist') || 
          item.id.includes('evaluation') || 
          item.id.includes('offline')
        );
        
        console.log(`üéØ [Diagnostic] ÿπÿØÿØ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿßŸÑŸÖÿ≠ÿ™ŸÖŸÑÿ©: ${evaluationItems.length}`);
        
        // ÿ™ÿµŸÜŸäŸÅ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™
        const localEvaluations = evaluationItems.filter(item => !item.value?.synced && !item.value?.isSynced);
        const syncedEvaluations = evaluationItems.filter(item => item.value?.synced || item.value?.isSynced);
        
        console.log(`üîç [Diagnostic] ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ© (ÿ∫Ÿäÿ± ŸÖÿ™ÿ≤ÿßŸÖŸÜÿ©): ${localEvaluations.length}`);
        console.log(`‚úÖ [Diagnostic] ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿßŸÑŸÖÿ™ÿ≤ÿßŸÖŸÜÿ©: ${syncedEvaluations.length}`);
        
        // ÿπÿ±ÿ∂ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©
        if (localEvaluations.length > 0) {
          console.log('üìã [Diagnostic] ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©:');
          localEvaluations.forEach((item, index) => {
            console.log(`  ${index + 1}. ${item.id}:`, {
              locationId: item.value?.locationId,
              userId: item.value?.userId,
              date: item.value?.checklistDate || item.value?.evaluationDate,
              tasksCount: (item.value?.tasks || item.value?.taskRatings || []).length,
              timestamp: new Date(item.timestamp).toLocaleString('ar-EG'),
              synced: item.value?.synced || false
            });
          });
          
          // ŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ© ŸÑŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ™ÿ≤ÿßŸÖŸÜÿ©
          console.log('üîÑ [Diagnostic] ŸÖÿ≠ÿßŸàŸÑÿ© ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ© ŸÑŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©...');
          try {
            await unifiedSystem.syncNow();
            console.log('‚úÖ [Diagnostic] ÿ™ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ© ÿ®ŸÜÿ¨ÿßÿ≠');
          } catch (syncError) {
            console.warn('‚ö†Ô∏è [Diagnostic] ŸÅÿ¥ŸÑ ŸÅŸä ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ©:', syncError);
          }
        } else {
          console.log('‚ùå [Diagnostic] ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ŸÇŸäŸäŸÖÿßÿ™ ŸÖÿ≠ŸÑŸäÿ© ÿ∫Ÿäÿ± ŸÖÿ™ÿ≤ÿßŸÖŸÜÿ©');
        }
        
        return {
          totalItems: allDataItems.length,
          evaluationItems: evaluationItems.length,
          localEvaluations: localEvaluations.length,
          syncedEvaluations: syncedEvaluations.length,
          localEvaluationsDetails: localEvaluations.map(item => ({
            id: item.id,
            locationId: item.value?.locationId,
            userId: item.value?.userId,
            date: item.value?.checklistDate || item.value?.evaluationDate,
            tasksCount: (item.value?.tasks || item.value?.taskRatings || []).length,
            timestamp: item.timestamp
          }))
        };
      } catch (error) {
        console.error('‚ùå [Diagnostic] ŸÅÿ¥ŸÑ ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™:', error);
        throw error;
      }
    },
    onSuccess: (data) => {
      toast({
        title: "ÿ™ŸÖ ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©",
        description: `ÿßŸÑÿπŸÜÿßÿµÿ± ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸäÿ©: ${data.totalItems} | ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™: ${data.evaluationItems} | ŸÖÿ≠ŸÑŸäÿ©: ${data.localEvaluations} | ŸÖÿ™ÿ≤ÿßŸÖŸÜÿ©: ${data.syncedEvaluations}`,
        variant: "default"
      });
    },
    onError: (error: any) => {
      toast({
        title: "ŸÅÿ¥ŸÑ ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
        description: error.message || "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©",
        variant: "destructive"
      });
    }
  });

  // üîß MUTATION: Excel Report Export
  const exportMutation = useMutation({
    mutationFn: async () => {
      console.log('üöÄ [Excel Report] Starting Excel export...');
      
      const reportData = {
        startDate: dateRange.startDate,
        endDate: dateRange.endDate
      };
      
      console.log('üìä [Excel Report] Report data:', reportData);
      console.log('üìÖ [Excel Report] Date range:', { from: dateRange.startDate, to: dateRange.endDate });
      console.log('üìç [Excel Report] Selected locations:', selectedLocationIds);
      console.log('üë§ [Excel Report] Selected users:', selectedUserIds);
      
      // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑŸÖŸÖŸäÿ≤ ŸÖŸÜ IndexedDB
      let token: string | null = null;
      try {
        const { enhancedIndexedDB } = await import("@/lib/enhancedIndexedDB");
        token = await enhancedIndexedDB.getAuthData('auth_token') || 
                await enhancedIndexedDB.getAuthData('token');
      } catch (error) {
        console.warn('‚ö†Ô∏è ŸÅÿ¥ŸÑ ŸÅŸä ÿßÿ≥ÿ™ÿ±ÿ¨ÿßÿπ ÿßŸÑŸÄ token ŸÖŸÜ IndexedDB:', error);
      }

      if (!token) {
        throw new Error('ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ±ŸÖÿ≤ ÿßŸÑÿ™ÿµÿ±Ÿäÿ≠. Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.');
      }

      // ‚úÖ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ≠ÿØÿ© ÿßŸÑŸÖŸèÿ¨ŸÖÿπÿ© ŸÖÿ≥ÿ®ŸÇÿßŸã
      console.log('üéØ [UnifiedData] ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿ≠ÿØ ŸÑŸÑÿ™ŸÇÿßÿ±Ÿäÿ±...');
      
      try {
        console.log(`‚úÖ [UnifiedData] ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ${unifiedEvaluations.length} ÿ™ŸÇŸäŸäŸÖ ŸÖŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿ≠ÿØ`);
        
        // ÿ•ÿ∞ÿß ŸàŸèÿ¨ÿØÿ™ ÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸàÿ≠ÿØÿ©ÿå ÿ£ÿ±ÿ≥ŸÑŸáÿß ŸÑŸÑÿÆÿßÿØŸÖ ŸÑÿ™ÿµÿØŸäÿ± Excel
        if (unifiedEvaluations.length > 0) {
          // üìù ÿ™ÿ∑ÿ®ŸäŸÇ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÅŸÑÿßÿ™ÿ± (ÿßŸÑÿ™ÿßÿ±ŸäÿÆÿå ÿßŸÑŸÖŸàÿßŸÇÿπÿå ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ) ÿπŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ≠ÿØÿ©
          const filteredEvaluations = unifiedEvaluations.filter((evaluation: any) => {
            // ŸÅŸÑÿ™ÿ± ÿßŸÑÿ™ÿßÿ±ŸäÿÆ - ÿßÿ≥ÿ™ÿ®ÿπÿßÿØ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿ®ÿØŸàŸÜ ÿ™ÿßÿ±ŸäÿÆ
            const evalDate = evaluation.evaluationDate || evaluation.checklistDate || evaluation.date;
            if (!evalDate) {
              if (process.env.NODE_ENV === 'development') {
                console.log(`üìù [DateFilter] Excluded: no date found`);
              }
              return false; // ÿßÿ≥ÿ™ÿ®ÿπÿßÿØ ÿµÿßÿ±ŸÖ ŸÑŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿ®ÿØŸàŸÜ ÿ™ÿßÿ±ŸäÿÆ
            }
            
            const evaluationDate = new Date(evalDate).toISOString().split('T')[0];
            const startDateNormalized = new Date(dateRange.startDate).toISOString().split('T')[0];
            const endDateNormalized = new Date(dateRange.endDate).toISOString().split('T')[0];
            
            const isWithinDateRange = evaluationDate >= startDateNormalized && evaluationDate <= endDateNormalized;
            if (!isWithinDateRange) {
              if (process.env.NODE_ENV === 'development') {
                console.log(`üìù [DateFilter] Excluded by date: ${evalDate}`);
              }
              return false;
            }
            
            // ŸÅŸÑÿ™ÿ± ÿßŸÑŸÖŸàÿßŸÇÿπ
            if (selectedLocationIds.length > 0) {
              const locationIdStr = evaluation.locationId?.toString();
              if (!selectedLocationIds.includes(locationIdStr)) {
                if (process.env.NODE_ENV === 'development') {
                  console.log(`üìù [LocationFilter] Excluded location: ${locationIdStr}`);
                }
                return false;
              }
            }
            
            // ŸÅŸÑÿ™ÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
            if (selectedUserIds.length > 0) {
              const userIdStr = evaluation.userId?.toString() || evaluation.evaluatorId?.toString();
              if (!selectedUserIds.includes(userIdStr)) {
                if (process.env.NODE_ENV === 'development') {
                  console.log(`üìù [UserFilter] Excluded user: ${userIdStr}`);
                }
                return false;
              }
            }
            
            return true;
          });
          
          console.log(`üìù [DateFilter] Filtered evaluations: ${filteredEvaluations.length} from ${unifiedEvaluations.length} total`);
          console.log(`üìù [DateFilter] Date range: ${dateRange.startDate} to ${dateRange.endDate}`);
          
          const unifiedReportData = {
            ...reportData,
            ...(selectedLocationIds.length > 0 && { locationIds: selectedLocationIds.map(id => parseInt(id)) }),
            ...(selectedUserIds.length > 0 && { userIds: selectedUserIds.map(id => parseInt(id)) }),
            evaluations: filteredEvaluations,
            useUnifiedData: true
          };
          
          // ÿ∑ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ≠ÿØÿ©
          const response = await fetch('/api/reports/export-excel', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(unifiedReportData),
            credentials: 'include'
          });
          
          return await response.blob();
        }
      } catch (unifiedError) {
        console.warn('‚ö†Ô∏è [UnifiedData] ŸÅÿ¥ŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿ≠ÿØÿå ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ŸÑŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä:', unifiedError);
      }
      
      // ‚ùå ÿ™ÿ±ÿßÿ¨ÿπ ŸÑŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ŸÅÿ¥ŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸáÿ¨ŸäŸÜ
      console.log('üîÑ [Fallback] ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä ŸÉÿ®ÿØŸäŸÑ...');
      const response = await fetch('/api/reports/export-excel', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          ...reportData,
          ...(selectedLocationIds.length > 0 && { locationIds: selectedLocationIds.map(id => parseInt(id)) }),
          ...(selectedUserIds.length > 0 && { userIds: selectedUserIds.map(id => parseInt(id)) })
        }),
        credentials: 'include'
      });
      
      console.log('üì° [Excel Report] Server response status:', response.status);
      console.log('üì° [Excel Report] Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [Excel Report] Server error:', errorText);
        throw new Error(`ÿÆÿ∑ÿ£ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ: ${response.status} - ${errorText}`);
      }
      
      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÜŸàÿπ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
      const contentType = response.headers.get('content-type');
      console.log('üì¶ [Excel Report] Content type:', contentType);
      
      if (contentType?.includes('application/json')) {
        // ÿ•ÿ∞ÿß ŸÉÿßŸÜ JSONÿå ŸÅŸáŸÜÿßŸÉ ÿÆÿ∑ÿ£
        const errorData = await response.json();
        console.error('‚ùå [Excel Report] JSON error response:', errorData);
        throw new Error(errorData.message || 'ÿÆÿ∑ÿ£ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ');
      }
      
      // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÉŸÄ Blob
      const blob = await response.blob();
      console.log('üì¶ [Excel Report] Blob size:', blob.size, 'bytes');
      console.log('üì¶ [Excel Report] Blob type:', blob.type);
      
      if (blob.size === 0) {
        throw new Error('ÿ™ŸÖ ÿßÿ≥ÿ™ŸÑÿßŸÖ ŸÖŸÑŸÅ ŸÅÿßÿ±ÿ∫ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ');
      }
      
      return blob;
    },
    onMutate: () => {
      console.log('üîÑ [Excel Report] Starting mutation...');
    },
    onSuccess: (blob) => {
      console.log('‚úÖ [Excel Report] Mutation successful, processing download...');
      
      // ÿ•ŸÜÿ¥ÿßÿ° ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `HSA_Work_Environment_Report_${new Date().toISOString().split('T')[0]}.xlsx`;
      link.style.display = 'none';
      document.body.appendChild(link);
      
      console.log('üìä [Frontend] Triggering download...', link.download);
      link.click();
      
      // ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖŸàÿßÿ±ÿØ
      setTimeout(() => {
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        console.log('‚úÖ [Frontend] Download cleanup completed');
      }, 100);
      
      toast({
        title: "ÿ™ŸÖ ÿßŸÑÿ™ÿµÿØŸäÿ± ÿ®ŸÜÿ¨ÿßÿ≠! üéâ",
        description: "ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ÿ™ŸÇÿ±Ÿäÿ± Excel ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ÿ®ŸÜÿ¨ÿßÿ≠",
        variant: "default",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿµÿØŸäÿ±",
        description: error.message || "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±",
        variant: "destructive",
      });
    }
  });

  // üß† MUTATION: Smart AI Analysis File Download
  const smartAnalysisFileMutation = useMutation({
    mutationFn: async () => {
      console.log('üìÑ [Smart Analysis File] ÿ®ÿØÿ° ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ∞ŸÉŸä...');
      
      const analysisData = {
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
        includeComments: true,
        analysisType: 'comprehensive',
        fileFormat: 'html'
      };
      
      console.log('üìä [Smart Analysis File] ÿ™ÿ≠ÿ∂Ÿäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™:', analysisData);
      
      // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ fetch ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ blob ŸÑŸÑÿ™ÿ≠ŸÖŸäŸÑ
      let token: string | null = null;
      try {
        const { enhancedIndexedDB } = await import("@/lib/enhancedIndexedDB");
        token = await enhancedIndexedDB.getAuthData('auth_token') || 
                await enhancedIndexedDB.getAuthData('token');
      } catch (error) {
        console.warn('‚ö†Ô∏è ŸÅÿ¥ŸÑ ŸÅŸä ÿßÿ≥ÿ™ÿ±ÿ¨ÿßÿπ ÿßŸÑŸÄ token ŸÖŸÜ IndexedDB:', error);
      }

      if (!token) {
        throw new Error('ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ±ŸÖÿ≤ ÿßŸÑÿ™ÿµÿ±Ÿäÿ≠. Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.');
      }
      
      // ‚úÖ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ≠ÿØÿ© ŸÑŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ∞ŸÉŸä
      console.log('üß† [SmartAnalysis] ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿ≠ÿØ ŸÑŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ∞ŸÉŸä...');
      
      try {
        console.log(`‚úÖ [SmartAnalysis] ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ${unifiedEvaluations.length} ÿ™ŸÇŸäŸäŸÖ ŸÖŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿ≠ÿØ`);
        
        if (unifiedEvaluations.length > 0) {
          // üìù ÿ™ÿ∑ÿ®ŸäŸÇ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÅŸÑÿßÿ™ÿ± ÿπŸÑŸâ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ∞ŸÉŸä
          const filteredAnalysisEvaluations = unifiedEvaluations.filter((evaluation: any) => {
            // ŸÅŸÑÿ™ÿ± ÿßŸÑÿ™ÿßÿ±ŸäÿÆ - ÿßÿ≥ÿ™ÿ®ÿπÿßÿØ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿ®ÿØŸàŸÜ ÿ™ÿßÿ±ŸäÿÆ
            const evalDate = evaluation.evaluationDate || evaluation.checklistDate || evaluation.date;
            if (!evalDate) return false; // ÿßÿ≥ÿ™ÿ®ÿπÿßÿØ ÿµÿßÿ±ŸÖ ŸÑŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿ®ÿØŸàŸÜ ÿ™ÿßÿ±ŸäÿÆ
            
            const evaluationDate = new Date(evalDate).toISOString().split('T')[0];
            const startDateNormalized = new Date(dateRange.startDate).toISOString().split('T')[0];
            const endDateNormalized = new Date(dateRange.endDate).toISOString().split('T')[0];
            
            const isWithinDateRange = evaluationDate >= startDateNormalized && evaluationDate <= endDateNormalized;
            if (!isWithinDateRange) return false;
            
            // ŸÅŸÑÿ™ÿ± ÿßŸÑŸÖŸàÿßŸÇÿπ
            if (selectedLocationIds.length > 0) {
              const locationIdStr = evaluation.locationId?.toString();
              if (!selectedLocationIds.includes(locationIdStr)) return false;
            }
            
            // ŸÅŸÑÿ™ÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
            if (selectedUserIds.length > 0) {
              const userIdStr = evaluation.userId?.toString() || evaluation.evaluatorId?.toString();
              if (!selectedUserIds.includes(userIdStr)) return false;
            }
            
            return true;
          });
          
          console.log(`üìù [SmartAnalysis DateFilter] Filtered: ${filteredAnalysisEvaluations.length} from ${unifiedEvaluations.length}`);
          
          const unifiedAnalysisData = {
            ...analysisData,
            ...(selectedLocationIds.length > 0 && { locationIds: selectedLocationIds.map(id => parseInt(id)) }),
            ...(selectedUserIds.length > 0 && { userIds: selectedUserIds.map(id => parseInt(id)) }),
            evaluations: filteredAnalysisEvaluations,
            useUnifiedData: true
          };
          
          const response = await fetch('/api/reports/smart-analysis-file', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(unifiedAnalysisData)
          });
          
          if (!response.ok) {
            const errorText = await response.text().catch(() => '');
            console.error('‚ùå [Smart Analysis] ÿÆÿ∑ÿ£ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ:', response.status, errorText);
            throw new Error(`ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± (${response.status})`);
          }
          
          console.log('‚úÖ [Smart Analysis] ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÜÿßÿ¨ÿ≠ÿ© ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ');
          const blob = await response.blob();
          console.log('‚úÖ [Smart Analysis] ÿ™ŸÖ ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÑŸÄ blob:', blob.size, 'ÿ®ÿßŸäÿ™');
          
          // ‚úÖ ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ ŸÖÿ´ŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä
          const fileName = `Smart_Analysis_Report_${new Date().toISOString().split('T')[0]}.html`;
          
          if (blob.size === 0) {
            throw new Error('ÿßŸÑŸÖŸÑŸÅ ŸÅÿßÿ±ÿ∫ - ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ');
          }
          
          console.log('üîΩ [Smart Analysis] ÿ®ÿØÿ° ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÑŸÅ:', fileName);
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          a.download = fileName;
          a.target = '_blank';
          document.body.appendChild(a);
          a.click();
          
          // ÿ™ŸÜÿ∏ŸäŸÅ ŸÖÿπ ÿ™ÿ£ÿÆŸäÿ±
          setTimeout(() => {
            window.URL.revokeObjectURL(url);
            if (document.body.contains(a)) {
              document.body.removeChild(a);
            }
            console.log('‚úÖ [Smart Analysis] ÿ™ŸÖ ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™');
          }, 1000);
          
          return { success: true, fileName };
        }
      } catch (unifiedError) {
        console.warn('‚ö†Ô∏è [SmartAnalysis] ŸÅÿ¥ŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿ≠ÿØÿå ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ŸÑŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä:', unifiedError);
      }
      
      // ‚ùå ÿ™ÿ±ÿßÿ¨ÿπ ŸÑŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä
      const response = await fetch('/api/reports/smart-analysis-file', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          startDate: analysisData.startDate,
          endDate: analysisData.endDate,
          includeComments: analysisData.includeComments,
          analysisType: analysisData.analysisType,
          fileFormat: analysisData.fileFormat,
          ...(selectedLocationIds.length > 0 && { locationIds: selectedLocationIds.map(id => parseInt(id)) }),
          ...(selectedUserIds.length > 0 && { userIds: selectedUserIds.map(id => parseInt(id)) })
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text().catch(() => '');
        console.error('‚ùå [Smart Analysis] ÿÆÿ∑ÿ£ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ (ÿ™ŸÇŸÑŸäÿØŸä):', response.status, errorText);
        throw new Error(`ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± (${response.status})`);
      }
      
      console.log('‚úÖ [Smart Analysis] ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÜÿßÿ¨ÿ≠ÿ© ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ (ÿ™ŸÇŸÑŸäÿØŸä)');
      const blob = await response.blob();
      console.log('‚úÖ [Smart Analysis] ÿ™ŸÖ ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÑŸÄ blob:', blob.size, 'ÿ®ÿßŸäÿ™');
      
      const fileName = `Smart_Analysis_Report_${new Date().toISOString().split('T')[0]}.html`;
      
      // ‚úÖ ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÑŸÅ
      if (blob.size === 0) {
        throw new Error('ÿßŸÑŸÖŸÑŸÅ ŸÅÿßÿ±ÿ∫ - ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ');
      }
      
      console.log('üîΩ [Smart Analysis] ÿ®ÿØÿ° ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÑŸÅ:', fileName);
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = fileName;
      a.target = '_blank'; // ŸÅÿ™ÿ≠ ŸÅŸä ŸÜÿßŸÅÿ∞ÿ© ÿ¨ÿØŸäÿØÿ© ŸÉÿßÿ≠ÿ™Ÿäÿßÿ∑
      document.body.appendChild(a);
      a.click();
      
      // ÿ™ŸÜÿ∏ŸäŸÅ ŸÖÿπ ÿ™ÿ£ÿÆŸäÿ± ÿ£ÿ∑ŸàŸÑ
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
        if (document.body.contains(a)) {
          document.body.removeChild(a);
        }
        console.log('‚úÖ [Smart Analysis] ÿ™ŸÖ ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™');
      }, 1000);
      
      return { success: true, fileName };
    },
    onMutate: () => {
      console.log('üîÑ [Smart Analysis File] ÿ®ÿØÿ° ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±...');
    },
    onSuccess: (data) => {
      console.log('‚úÖ [Smart Analysis File] ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° Ÿàÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ÿ®ŸÜÿ¨ÿßÿ≠:', data);
      
      toast({
        title: "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ∞ŸÉŸä! üìÑ",
        description: `ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ∞ŸÉŸä ÿ®ŸÜÿ¨ÿßÿ≠`,
        variant: "default",
      });
    },
    onError: (error: Error) => {
      console.error('‚ùå [Smart Analysis File] ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÑŸÅ:', error);
      toast({
        title: "ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±",
        description: error.message || "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±",
        variant: "destructive",
      });
    }
  });

  // ===== MUTATION: HTML Report Export =====
  const exportHtmlMutation = useMutation({
    mutationFn: async () => {
      console.log('üöÄ [HTML Report] Starting HTML export‚Ä¶');
      
      const reportData = {
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
        locationIds: selectedLocationIds,
        userIds: selectedUserIds,
        includeSmartAnalytics: true // ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÑÿßŸÖÿ© ŸÑŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ©
      };
      
      console.log('üìä [HTML Report] Report data:', reportData);
      
      // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÜŸÅÿ≥ ŸÖŸÜÿ∑ŸÇ ÿßŸÑŸÄ token ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸä PDF export
      const { enhancedIndexedDB } = await import("@/lib/enhancedIndexedDB");
      const token = await enhancedIndexedDB.getAuthData('auth_token') || 
                    await enhancedIndexedDB.getAuthData('token');
      if (!token) {
        throw new Error('ŸÑÿß ŸäŸÖŸÉŸÜ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ±ŸÖÿ≤ ÿßŸÑŸÖÿµÿßÿØŸÇÿ©');
      }
      
      const response = await fetch('/api/reports/export-html', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(reportData)
      });
      
      if (!response.ok) {
        let errorMessage = `ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ: ${response.status}`;
        try {
          const errorData = await response.json();
          if (errorData && typeof errorData === 'object' && errorData.error) {
            errorMessage = errorData.error;
          }
        } catch (e) {
          // If parsing JSON fails, use default error message
        }
        throw new Error(errorMessage);
      }
      
      const blob = await response.blob();
      console.log('‚úÖ [HTML Report] ÿ™ŸÖ ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÑŸÄ blob:', blob.size, 'bytes');
      
      return blob;
    },
    onSuccess: (blob) => {
      console.log('‚úÖ [HTML Report] Mutation successful, processing download‚Ä¶');
      
      // Create download link
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `HSA_Smart_Analytics_Report_${new Date().toISOString().split('T')[0]}.html`;
      link.style.display = 'none';
      document.body.appendChild(link);
      
      console.log('üìä [Frontend] Triggering HTML download‚Ä¶', link.download);
      link.click();
      
      // Cleanup resources
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
        if (document.body.contains(link)) {
          document.body.removeChild(link);
        }
        console.log('‚úÖ [HTML Report] ÿ™ŸÖ ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™');
      }, 1000);
      
      toast({
        title: "ÿ™ŸÖ ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±! üìÑ",
        description: "ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ÿ™ŸÇÿ±Ÿäÿ± HTML ÿ®ŸÜÿ¨ÿßÿ≠",
        variant: "default",
      });
    },
    onError: (error: Error) => {
      console.error('‚ùå [HTML Report] ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±:', error);
      toast({
        title: "ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±",
        description: error.message || "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ŸÜÿ¥ÿßÿ° ÿ™ŸÇÿ±Ÿäÿ± HTML",
        variant: "destructive",
      });
    }
  });


  // Ÿàÿ∏ŸäŸÅÿ© ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± Excel
  const handleExportReport = () => {
    exportMutation.mutate();
  };

  // Ÿàÿ∏ŸäŸÅÿ© ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± HTML  
  const handleExportHTML = () => {
    exportHtmlMutation.mutate();
  };

  // Ÿàÿ∏ŸäŸÅÿ© ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ∞ŸÉŸä - ÿ™ÿ≠ŸÖŸäŸÑ ŸÖŸÑŸÅ
  const handleSmartAnalysisFile = () => {
    smartAnalysisFileMutation.mutate();
  };



  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-6" dir="rtl">
      <div className="max-w-7xl mx-auto">
        {/* ÿßŸÑÿπŸÜŸàÿßŸÜ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white flex items-center gap-3">
            <FileText className="w-8 h-8 text-yellow-600" />
            üìä ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            ÿ•ÿØÿßÿ±ÿ© ŸàŸÅŸÑÿ™ÿ±ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
          </p>
        </div>

        {/* Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑÿ™ÿ®ŸàŸäÿ® ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© */}
        <Tabs defaultValue="traditional" className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-6" data-testid="reports-tabs">
            <TabsTrigger 
              value="traditional" 
              className="flex items-center gap-2 text-lg font-bold"
              data-testid="tab-traditional-reports"
            >
              <FileText className="w-5 h-5" />
              ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ©
            </TabsTrigger>
            <TabsTrigger 
              value="smart" 
              className="flex items-center gap-2 text-lg font-bold"
              data-testid="tab-smart-analytics"
            >
              <TrendingUp className="w-5 h-5" />
              ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ©
            </TabsTrigger>
          </TabsList>

          {/* ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ© */}
          <TabsContent value="traditional" className="space-y-6">

        {/* ÿπÿ±ÿ∂ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ®ÿßÿ¥ÿ± */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-3 justify-between">
              <div className="flex items-center gap-3">
                <FileText className="w-6 h-6 text-yellow-600" />
                üìã ŸÖÿπÿßŸäŸÜÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    console.log('üîÑ [Reports] ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∂ÿ∫ÿ∑ ÿ≤ÿ± ÿßŸÑÿ™ÿ≠ÿØŸäÿ´...');
                    refetchData();
                  }}
                  disabled={isDataLoading}
                  className="flex items-center gap-2"
                >
                  <RefreshCw className={`w-4 h-4 ${isDataLoading ? 'animate-spin' : ''}`} />
                  ÿ™ÿ≠ÿØŸäÿ´
                </Button>
                
                {unifiedSystem.hasUnsynced && (
                  <Button
                    variant="default"
                    size="sm"
                    onClick={handleManualSync}
                    disabled={unifiedSystem.isSyncing || !unifiedSystem.isOnline}
                    className="flex items-center gap-2 bg-yellow-500 hover:bg-yellow-600 text-black"
                  >
                    <RefreshCw className={`w-4 h-4 ${unifiedSystem.isSyncing ? 'animate-spin' : ''}`} />
                    ŸÖÿ≤ÿßŸÖŸÜÿ© ŸÖÿ≠ŸÑŸäÿ© ({unifiedSystem.syncStats.pendingSync})
                  </Button>
                )}
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {/* ÿ™ŸÜÿ®ŸäŸá ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ© */}
            {unifiedSystem.hasUnsynced && (
              <div className="mb-4 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-300 dark:border-yellow-600 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                  <div className="flex-1">
                    <h4 className="font-medium text-black dark:text-white">
                      üì± ŸäŸàÿ¨ÿØ {unifiedSystem.syncStats.pendingSync} ÿ™ŸÇŸäŸäŸÖ ŸÖÿ≠ŸÅŸàÿ∏ ŸÖÿ≠ŸÑŸäÿßŸã
                    </h4>
                    <p className="text-sm text-black dark:text-white mt-1">
                      Ÿáÿ∞Ÿá ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ŸÑŸÖ ÿ™ÿ∏Ÿáÿ± ŸÅŸä ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿ®ÿπÿØ ŸÑÿ£ŸÜŸáÿß ŸÑŸÖ ÿ™ÿ™ŸÖ ŸÖÿ≤ÿßŸÖŸÜÿ™Ÿáÿß ŸÖÿπ ÿßŸÑÿÆÿßÿØŸÖ. ÿßÿ∂ÿ∫ÿ∑ ÿ≤ÿ± "ŸÖÿ≤ÿßŸÖŸÜÿ© ŸÖÿ≠ŸÑŸäÿ©" ŸÑŸÜŸÇŸÑŸáÿß.
                    </p>
                  </div>
                </div>
              </div>
            )}
            
            {/* ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿ≥ÿ±Ÿäÿπÿ© */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border border-yellow-300 dark:border-yellow-600">
                <div className="flex items-center gap-2 text-black dark:text-white">
                  <FileText className="w-5 h-5 text-yellow-600" />
                  <span className="font-medium">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™</span>
                </div>
                <div className="text-2xl font-bold text-black dark:text-white mt-1">
                  {totalEvaluations}
                </div>
              </div>
              
              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border border-yellow-300 dark:border-yellow-600">
                <div className="flex items-center gap-2 text-black dark:text-white">
                  <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                  <span className="font-medium">ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ</span>
                </div>
                <div className="text-2xl font-bold text-black dark:text-white mt-1">
                  {totalEvaluations}
                </div>
              </div>
              
              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border border-yellow-300 dark:border-yellow-600">
                <div className="flex items-center gap-2 text-black dark:text-white">
                  <Users className="w-5 h-5 text-yellow-600" />
                  <span className="font-medium">ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ ÿßŸÑŸÖÿ¥ŸÖŸàŸÑŸàŸÜ</span>
                </div>
                <div className="text-2xl font-bold text-black dark:text-white mt-1">
                  {Array.from(new Set(unifiedEvaluations.map((e: any) => e.userId))).length}
                </div>
              </div>
              
              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border border-yellow-300 dark:border-yellow-600">
                <div className="flex items-center gap-2 text-black dark:text-white">
                  <MapPin className="w-5 h-5 text-black dark:text-white" />
                  <span className="font-medium">ÿßŸÑŸÖŸàÿßŸÇÿπ ÿßŸÑŸÖÿ¥ŸÖŸàŸÑÿ©</span>
                </div>
                <div className="text-2xl font-bold text-black dark:text-white mt-1">
                  {Array.from(new Set(unifiedEvaluations.map((e: any) => e.locationId))).length}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ™ÿµÿØŸäÿ± ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸä */}
        <Card className="mb-6 border-2 border-yellow-300 dark:border-yellow-600 bg-white dark:bg-gray-900">
          <CardHeader>
            <CardTitle className="flex items-center gap-3">
              <BarChart3 className="w-6 h-6 text-yellow-600 dark:text-yellow-400" />
              üìä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {/* ÿßŸÑŸÅŸÑÿßÿ™ÿ± ÿßŸÑŸÖÿØŸÖÿ¨ÿ© - ÿµŸÅ Ÿàÿßÿ≠ÿØ ÿ®ÿ£ÿ≤ÿ±ÿßÿ± ÿµÿ∫Ÿäÿ±ÿ© */}
              <div className="flex flex-wrap items-center gap-3 p-4 bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/20 rounded-xl border-2 border-yellow-300 dark:border-yellow-600">
                {/* ÿ≤ÿ± ŸÅŸÑÿ™ÿ± ÿßŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑÿ≤ŸÖŸÜŸäÿ© */}
                <Collapsible open={isLocationSelectorOpen} onOpenChange={setIsLocationSelectorOpen}>
                  <CollapsibleTrigger asChild>
                    <Button 
                      variant="outline" 
                      className="h-10 px-4 bg-white hover:bg-yellow-50 border-2 border-yellow-400 text-gray-900 font-semibold rounded-lg shadow-sm hover:shadow-md transition-all"
                    >
                      <Calendar className="w-4 h-4 ml-2" />
                      <span className="text-sm">ÿßŸÑŸÅÿ™ÿ±ÿ©: {format(new Date(dateRange.startDate), 'dd/MM', { locale: ar })} - {format(new Date(dateRange.endDate), 'dd/MM', { locale: ar })}</span>
                      <ChevronDown className="w-4 h-4 mr-2" />
                    </Button>
                  </CollapsibleTrigger>
                  <CollapsibleContent className="absolute z-50 mt-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-xl border-2 border-yellow-300 min-w-[320px]">
                    <div className="space-y-3">
                      <div className="font-semibold text-gray-900 dark:text-white flex items-center gap-2">
                        <Calendar className="w-4 h-4 text-yellow-600" />
                        ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑÿ≤ŸÖŸÜŸäÿ©
                      </div>
                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">ŸÖŸÜ</label>
                          <Input
                            type="date"
                            value={dateRange.startDate}
                            onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                            className="h-9 text-sm"
                            data-testid="professional-report-start-date"
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">ÿ•ŸÑŸâ</label>
                          <Input
                            type="date"
                            value={dateRange.endDate}
                            onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                            className="h-9 text-sm"
                            data-testid="professional-report-end-date"
                          />
                        </div>
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>

                {/* ÿ≤ÿ± ŸÅŸÑÿ™ÿ± ÿßŸÑŸÖŸàÿßŸÇÿπ */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button 
                      variant="outline" 
                      className="h-10 px-4 bg-white hover:bg-green-50 border-2 border-green-400 text-gray-900 font-semibold rounded-lg shadow-sm hover:shadow-md transition-all"
                    >
                      <MapPin className="w-4 h-4 ml-2 text-green-600" />
                      <span className="text-sm">ÿßŸÑŸÖŸàÿßŸÇÿπ: {selectedLocationIds.length > 0 ? `${selectedLocationIds.length} ŸÖÿÆÿ™ÿßÿ±` : 'ÿßŸÑŸÉŸÑ'}</span>
                      <ChevronDown className="w-4 h-4 mr-2" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-80 max-h-96 overflow-y-auto bg-white dark:bg-gray-800 text-black dark:text-white">
                    <div className="p-3 space-y-3">
                      <div className="flex items-center justify-between pb-2 border-b">
                        <span className="font-semibold text-sm text-black dark:text-white">ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖŸàÿßŸÇÿπ</span>
                        <div className="flex gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSelectedLocationIds(locations.map(loc => loc.id.toString()))}
                            className="h-7 px-2 text-xs"
                            data-testid="button-select-all-locations"
                          >
                            ÿßŸÑŸÉŸÑ
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSelectedLocationIds([])}
                            className="h-7 px-2 text-xs text-red-600"
                            data-testid="button-clear-locations"
                          >
                            ŸÖÿ≥ÿ≠
                          </Button>
                        </div>
                      </div>
                      <div className="space-y-2">
                        {locations.map((location) => (
                          <div key={location.id} className="flex items-center space-x-2 space-x-reverse hover:bg-gray-50 p-2 rounded">
                            <Checkbox
                              id={`location-${location.id}`}
                              checked={selectedLocationIds.includes(location.id.toString())}
                              onCheckedChange={(checked) => {
                                if (checked) {
                                  setSelectedLocationIds(prev => [...prev, location.id.toString()]);
                                } else {
                                  setSelectedLocationIds(prev => prev.filter(id => id !== location.id.toString()));
                                }
                              }}
                              data-testid={`checkbox-location-${location.id}`}
                            />
                            <label
                              htmlFor={`location-${location.id}`}
                              className="text-sm cursor-pointer flex-1 text-black dark:text-white"
                            >
                              {location.nameAr}
                            </label>
                          </div>
                        ))}
                      </div>
                    </div>
                  </DropdownMenuContent>
                </DropdownMenu>

                {/* ÿ≤ÿ± ŸÅŸÑÿ™ÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button 
                      variant="outline" 
                      className="h-10 px-4 bg-white hover:bg-blue-50 border-2 border-blue-400 text-gray-900 font-semibold rounded-lg shadow-sm hover:shadow-md transition-all"
                    >
                      <Users className="w-4 h-4 ml-2 text-blue-600" />
                      <span className="text-sm">ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ: {selectedUserIds.length > 0 ? `${selectedUserIds.length} ŸÖÿÆÿ™ÿßÿ±` : 'ÿßŸÑŸÉŸÑ'}</span>
                      <ChevronDown className="w-4 h-4 mr-2" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-80 max-h-96 overflow-y-auto bg-white dark:bg-gray-800 text-black dark:text-white">
                    <div className="p-3 space-y-3">
                      <div className="flex items-center justify-between pb-2 border-b">
                        <span className="font-semibold text-sm text-black dark:text-white">ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ</span>
                        <div className="flex gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSelectedUserIds(filteredUsers.map(user => user.id.toString()))}
                            className="h-7 px-2 text-xs"
                            data-testid="button-select-all-users"
                          >
                            ÿßŸÑŸÉŸÑ
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSelectedUserIds([])}
                            className="h-7 px-2 text-xs text-red-600"
                            data-testid="button-clear-users"
                          >
                            ŸÖÿ≥ÿ≠
                          </Button>
                        </div>
                      </div>
                      <div className="space-y-2">
                        {filteredUsers.map((user) => (
                          <div key={user.id} className="flex items-center space-x-2 space-x-reverse hover:bg-gray-50 p-2 rounded">
                            <Checkbox
                              id={`user-${user.id}`}
                              checked={selectedUserIds.includes(user.id.toString())}
                              onCheckedChange={(checked) => {
                                if (checked) {
                                  setSelectedUserIds(prev => [...prev, user.id.toString()]);
                                } else {
                                  setSelectedUserIds(prev => prev.filter(id => id !== user.id.toString()));
                                }
                              }}
                              data-testid={`checkbox-user-${user.id}`}
                            />
                            <label
                              htmlFor={`user-${user.id}`}
                              className="text-sm cursor-pointer flex-1 text-black dark:text-white"
                            >
                              <div className="font-medium text-black dark:text-white">{user.fullName}</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">{user.role}</div>
                            </label>
                          </div>
                        ))}
                      </div>
                    </div>
                  </DropdownMenuContent>
                </DropdownMenu>

                {/* ŸÖŸÑÿÆÿµ ÿßŸÑŸÅŸÑÿßÿ™ÿ± */}
                <div className="flex-1 min-w-[200px] text-sm text-gray-700 dark:text-gray-300 font-medium">
                  <div className="flex items-center gap-4">
                    <span className="text-yellow-600 font-bold">{selectedLocationsCount} ŸÖŸàŸÇÿπ</span>
                    <span className="text-gray-400">‚Ä¢</span>
                    <span className="text-blue-600 font-bold">{selectedUsersCount} ŸÖÿ≥ÿ™ÿÆÿØŸÖ</span>
                  </div>
                </div>
              </div>

              {/* ÿ£ÿ≤ÿ±ÿßÿ± ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© */}
              <div className="max-w-lg mx-auto">
                <div className="space-y-3">
                  <div className="flex items-center gap-2 text-sm text-black dark:text-white">
                    <BarChart3 className="w-4 h-4 text-yellow-600" />
                    <span className="font-medium">ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©</span>
                  </div>
                  <div className="text-xs text-black dark:text-white bg-yellow-50 dark:bg-yellow-900/20 p-2 rounded border-l-4 border-yellow-400">
                    <strong>üíº ÿ™ŸÇÿ±Ÿäÿ± ÿ¥ÿßŸÖŸÑ:</strong> ÿ¨ÿØÿßŸàŸÑ ŸÖŸÅÿµŸÑÿ© ‚Ä¢ ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ŸÖÿ™ŸÇÿØŸÖÿ© ‚Ä¢ ÿ±ÿ≥ŸàŸÖ ÿ®ŸäÿßŸÜŸäÿ© ‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ÿØÿßÿ°
                  </div>
                  
                  {/* ŸÇÿßÿ¶ŸÖÿ© ŸÖŸÜÿ≥ÿØŸÑÿ© ŸÑŸÑÿ™ÿµÿØŸäÿ± */}
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        disabled={exportMutation.isPending || exportHtmlMutation.isPending}
                        className="w-full bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        data-testid="button-export-dropdown"
                      >
                        <div className="flex items-center gap-3 justify-center">
                          {exportMutation.isPending || exportHtmlMutation.isPending ? (
                            <>
                              <div className="animate-spin rounded-full h-5 w-5 border-2 border-black border-t-transparent"></div>
                              <span>ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿµÿØŸäÿ±...</span>
                            </>
                          ) : (
                            <>
                              <FileDown className="w-5 h-5" />
                              <span>üìä ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸä</span>
                              <ChevronDown className="w-4 h-4 ml-2" />
                            </>
                          )}
                        </div>
                      </Button>
                    </DropdownMenuTrigger>
                    
                    <DropdownMenuContent className="w-80 p-2 bg-white dark:bg-gray-800 text-black dark:text-white" align="center">
                      {/* ÿÆŸäÿßÿ± Excel */}
                      <DropdownMenuItem 
                        className="p-4 cursor-pointer hover:bg-yellow-50 dark:hover:bg-yellow-900/20 rounded-lg text-black dark:text-white"
                        onClick={handleExportReport}
                        disabled={exportMutation.isPending}
                        data-testid="option-export-excel"
                      >
                        <div className="flex items-center gap-3 w-full">
                          <div className="flex items-center justify-center w-10 h-10 bg-green-100 dark:bg-green-900/30 rounded-lg">
                            <FileSpreadsheet className="w-5 h-5 text-green-600" />
                          </div>
                          <div className="flex-1">
                            <div className="font-medium text-black dark:text-white">ÿ™ŸÇÿ±Ÿäÿ± Excel ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä</div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">ÿ¨ÿØÿßŸàŸÑ ÿ™ŸÅÿµŸäŸÑŸäÿ© Ÿàÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ŸÖÿ™ŸÇÿØŸÖÿ©</div>
                          </div>
                          {exportMutation.isPending && (
                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-green-600 border-t-transparent"></div>
                          )}
                        </div>
                      </DropdownMenuItem>
                      
                      {/* ÿÆŸäÿßÿ± HTML */}
                      <DropdownMenuItem 
                        className="p-4 cursor-pointer hover:bg-yellow-50 dark:hover:bg-yellow-900/20 rounded-lg mt-2 text-black dark:text-white"
                        onClick={handleExportHTML}
                        disabled={exportHtmlMutation.isPending}
                        data-testid="option-export-html"
                      >
                        <div className="flex items-center gap-3 w-full">
                          <div className="flex items-center justify-center w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                            <FileText className="w-5 h-5 text-blue-600" />
                          </div>
                          <div className="flex-1">
                            <div className="font-medium text-black dark:text-white">ÿ™ŸÇÿ±Ÿäÿ± HTML ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä</div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">ÿ™ŸÇÿ±Ÿäÿ± ÿ™ŸÅÿßÿπŸÑŸä ŸÑŸÑÿπÿ±ÿ∂ ŸàÿßŸÑŸÖÿ¥ÿßÿ±ŸÉÿ©</div>
                          </div>
                          {exportHtmlMutation.isPending && (
                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent"></div>
                          )}
                        </div>
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>
            </div>
          </CardContent>
            </Card>
          </TabsContent>

          {/* ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ© */}
          <TabsContent value="smart" className="space-y-6">
            <Card className="border-2 border-yellow-300 dark:border-yellow-600 bg-white dark:bg-gray-900">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-3">
                    <Activity className="w-6 h-6 text-yellow-600 dark:text-yellow-400" />
                    üéØ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ© ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©
                  </CardTitle>
                  
                  {/* ÿ≤ÿ± ÿ™ÿµÿØŸäÿ± HTML */}
                  <Button
                    onClick={handleExportHTML}
                    disabled={exportHtmlMutation.isPending}
                    className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2"
                    data-testid="button-export-html"
                  >
                    <div className="flex items-center gap-2">
                      {exportHtmlMutation.isPending ? (
                        <Loader2 className="w-4 h-4 animate-spin" />
                      ) : (
                        <FileDown className="w-4 h-4" />
                      )}
                      ÿ™ÿµÿØŸäÿ± HTML
                    </div>
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* ÿ¥ÿ±Ÿäÿ∑ ÿßŸÑÿ™ÿµŸÅŸäÿ© ÿßŸÑŸÖŸàÿ≠ÿØ */}
                <FilterBar
                  users={filteredUsers as any}
                  locations={locations as any}
                  selectedUserIds={selectedUserIds}
                  selectedLocationIds={selectedLocationIds}
                  dateRange={{ startDate: dateRange.startDate, endDate: dateRange.endDate }}
                  onUserIdsChange={setSelectedUserIds}
                  onLocationIdsChange={setSelectedLocationIds}
                  onDateRangeChange={(range) => {
                    setDateRange({
                      startDate: range.startDate,
                      endDate: range.endDate
                    });
                  }}
                />

                {/* ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© */}
                <div className="space-y-4">
                  <h3 className="text-xl font-bold text-black dark:text-white flex items-center gap-2">
                    <Zap className="w-5 h-5 text-yellow-600" />
                    ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
                  </h3>
                  {kpiError ? (
                    <Card className="p-4 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800">
                      <p className="text-red-600 dark:text-red-400">ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ°: {kpiError.message}</p>
                    </Card>
                  ) : (
                    <KPICards data={kpiData || null} isLoading={isKpiLoading} />
                  )}
                </div>

                {/* ŸÖÿÆÿ∑ÿ∑ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ */}
                <div className="space-y-4">
                  <h3 className="text-xl font-bold text-black dark:text-white flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-yellow-600" />
                    ÿßÿ™ÿ¨ÿßŸáÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ°
                  </h3>
                  {trendsError ? (
                    <Card className="p-4 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800">
                      <p className="text-red-600 dark:text-red-400">ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™: {trendsError.message}</p>
                    </Card>
                  ) : (
                    <TrendsChart data={trendsData || null} isLoading={isTrendsLoading} />
                  )}
                </div>

                {/* ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖŸÇÿßÿ±ŸÜÿ© */}
                <div className="space-y-4">
                  <h3 className="text-xl font-bold text-black dark:text-white flex items-center gap-2">
                    <BarChart3 className="w-5 h-5 text-yellow-600" />
                    ŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑÿ£ÿØÿßÿ°
                  </h3>
                  {comparisonError ? (
                    <Card className="p-4 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800">
                      <p className="text-red-600 dark:text-red-400">ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÇÿßÿ±ŸÜÿ©: {comparisonError.message}</p>
                    </Card>
                  ) : (
                    <ComparisonTable data={comparisonData || null} isLoading={isComparisonLoading} />
                  )}
                </div>

                {/* ÿßŸÑÿ±ÿ§Ÿâ ÿßŸÑÿ∞ŸÉŸäÿ© */}
                {insightsData && (
                  <div className="space-y-4">
                    <h3 className="text-xl font-bold text-black dark:text-white flex items-center gap-2">
                      <Brain className="w-5 h-5 text-yellow-600" />
                      ÿßŸÑÿ±ÿ§Ÿâ ÿßŸÑÿ∞ŸÉŸäÿ©
                    </h3>
                    {insightsError ? (
                      <Card className="p-4 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800">
                        <p className="text-red-600 dark:text-red-400">ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ±ÿ§Ÿâ: {insightsError.message}</p>
                      </Card>
                    ) : (
                      <Card className="p-4 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20">
                        <div className="prose max-w-none dark:prose-invert">
                          <div className="whitespace-pre-wrap text-sm">
                            {insightsData?.insights?.map((insight, index) => (
                              <div key={index} className="mb-4 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                                <h4 className="font-bold text-lg mb-2">{insight.title}</h4>
                                <p className="text-gray-700 dark:text-gray-300">{insight.description}</p>
                                <span className={`inline-block px-2 py-1 rounded text-xs mt-2 ${
                                  insight.impact === 'high' ? 'bg-red-100 text-red-800' :
                                  insight.impact === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                  'bg-blue-100 text-blue-800'
                                }`}>
                                  {insight.impact === 'high' ? 'ÿ™ÿ£ÿ´Ÿäÿ± ÿπÿßŸÑŸä' :
                                   insight.impact === 'medium' ? 'ÿ™ÿ£ÿ´Ÿäÿ± ŸÖÿ™Ÿàÿ≥ÿ∑' : 'ÿ™ÿ£ÿ´Ÿäÿ± ŸÖŸÜÿÆŸÅÿ∂'}
                                </span>
                              </div>
                            )) || <p>ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ±ÿ§Ÿâ ŸÖÿ™ÿßÿ≠ÿ© ÿ≠ÿßŸÑŸäÿßŸã</p>}
                          </div>
                        </div>
                      </Card>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}